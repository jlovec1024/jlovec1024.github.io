<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git清理commit中历史提交的大文件 - 云+社区 - 腾讯云</title>
      <link href="/2021/08/19/git-qing-li-commit-zhong-li-shi-ti-jiao-de-da-wen-jian-yun-she-qu-teng-xun-yun/"/>
      <url>/2021/08/19/git-qing-li-commit-zhong-li-shi-ti-jiao-de-da-wen-jian-yun-she-qu-teng-xun-yun/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章时间：2019 年 11 月 10 日 14:02:59 解决问题：清理 Git 中比较大的文件，主要针对历史记录进行清理 ps：因为 Git 可以恢复版本，所有历史提交过的较大的文件，也会被保存下来，所以我们需要……xx 嗯，你懂的。</p></blockquote><h4 id="这里方法有两种，下面方法主要介绍了其中一种"><a href="#这里方法有两种，下面方法主要介绍了其中一种" class="headerlink" title="这里方法有两种，下面方法主要介绍了其中一种"></a>这里方法有两种，下面方法主要介绍了其中一种</h4><h2 id="查看目录下的文件的大小"><a href="#查看目录下的文件的大小" class="headerlink" title="查看目录下的文件的大小"></a>查看目录下的文件的大小</h2><pre><code>git count\-objects \-v # 查看 git 相关文件占用的空间du \-sh .git # 查看 .git 文件夹占用磁盘空间du \-d 1 \-h  # 列出所有文件的大小</code></pre><p>du 是 linux 的基础命令，很多用法，详情自己去查找其他文档。 因为 git 的历史文件都是存在一个文件里的，我们使用下面命令可以找出排名前五的文件</p><pre><code>git verify\-pack \-v .git/objects/pack/pack\-\*.idx | sort \-k 3 \-g | tail \-5</code></pre><h2 id="方法一-纯手动（小米-步枪）的方法"><a href="#方法一-纯手动（小米-步枪）的方法" class="headerlink" title="方法一 纯手动（小米 + 步枪）的方法"></a>方法一 纯手动（小米 + 步枪）的方法</h2><p>直接参考这篇教程即可，写的比较全面，比百度上很多废教程好多了。 记一次删除 Git 记录中的大文件的过程：<code>https://www.hollischuang.com/archives/1708</code></p><h2 id="方法二-工具化（自动机枪）"><a href="#方法二-工具化（自动机枪）" class="headerlink" title="方法二 工具化（自动机枪）"></a>方法二 工具化（自动机枪）</h2><p>工具名称：BFG 工具地址：<code>https://rtyley.github.io/bfg-repo-cleaner/</code></p><h3 id="第一步-下载包文件"><a href="#第一步-下载包文件" class="headerlink" title="第一步 下载包文件"></a>第一步 下载包文件</h3><p>直接官网下载即可，bfg-1.13.0.jar 将程序包放到一个文件夹里，为了方便，重命名为 bfg.jar</p><h3 id="第二步-克隆仓库"><a href="#第二步-克隆仓库" class="headerlink" title="第二步 克隆仓库"></a>第二步 克隆仓库</h3><p>clone 自己的 git repo，使用 –mirror 参数</p><pre><code>git clone \--mirror http://192.168.1.199:8099/hcses/hcses\-warehouse.git</code></pre><h3 id="第三步-清除大文件，文件夹，隐私文件"><a href="#第三步-清除大文件，文件夹，隐私文件" class="headerlink" title="第三步 清除大文件，文件夹，隐私文件"></a>第三步 清除大文件，文件夹，隐私文件</h3><p>这里官网给出的命令，可能会不行，我们继续添加参数。 删除文件和删除文件夹的命令</p><pre><code>java \-jar bfg.jar \--delete\-files 我是单个文件名字 hcses\-warehouse.git \--no\-blob\-protectionjava \-jar bfg.jar \--delete\-folders 我是文件夹的名字 hcses\-warehouse.git \--no\-blob\-protection</code></pre><h3 id="第四步-清理不需要的数据"><a href="#第四步-清理不需要的数据" class="headerlink" title="第四步 清理不需要的数据"></a>第四步 清理不需要的数据</h3><p>在完成上面的指令后，实际上这些数据 / 文件并没有被直接删除，这时候需要使用 git gc 指令来清除。</p><pre><code>cd hcses\-warehouse.gitgit reflog expire \--expire\=now \--all &amp;&amp; git gc \--prune\=now \--aggressive</code></pre><h3 id="第五步-推送到-GitHub"><a href="#第五步-推送到-GitHub" class="headerlink" title="第五步 推送到 GitHub"></a>第五步 推送到 GitHub</h3><pre><code>git push</code></pre><p>这里普通推送可能也会报错，我们可以使用强制推送。</p><pre><code>git push \--force</code></pre><p>本文参与<a href="https://cloud.tencent.com/developer/support-plan">腾讯云自媒体分享计划</a>，欢迎正在阅读的你也加入，一起分享。</p><p><a href="https://cloud.tencent.com/developer/article/1536481">https://cloud.tencent.com/developer/article/1536481</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>macbook：  The headers or library files could not be found for zlib</title>
      <link href="/2021/08/15/macbook-the-headers-or-library-files-could-not-be-found-for-zlib/"/>
      <url>/2021/08/15/macbook-the-headers-or-library-files-could-not-be-found-for-zlib/</url>
      
        <content type="html"><![CDATA[<h1 id="问题：-python-无法安装-pillow-7-1-2"><a href="#问题：-python-无法安装-pillow-7-1-2" class="headerlink" title="问题： python 无法安装 pillow==7.1.2"></a>问题： python 无法安装 pillow==7.1.2</h1><blockquote><p>报错： The headers or library files could not be found for zlib,</p></blockquote><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查找 zlib.h</span><span class="token function">find</span>  /Library/Developer/CommandLineTools/ -name <span class="token string">"*zlib*"</span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/527662/1628993156344-63af1a6e-df07-4fa7-b350-a6359073c01f.png#clientId=ud2a77933-c0e9-4&amp;from=paste&amp;height=582&amp;id=u12af3e8d&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1164&amp;originWidth=2866&amp;originalType=binary%E2%88%B6=1&amp;size=798788&amp;status=done&amp;style=none&amp;taskId=u0dbee416-4bd3-4b17-b540-23d50ba8957&amp;width=1433" alt="image.png"></p><p>创建软连接</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ln</span> -s /Library/Developer/CommandLineTools//SDKs/MacOSX11.1.sdk/usr/include/zlib.h /usr/local/include</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>將打包好的 Helm Chart Push 至 Nexus</title>
      <link href="/2021/07/29/jiang-da-bao-hao-de-helm-chart-push-zhi-nexus/"/>
      <url>/2021/07/29/jiang-da-bao-hao-de-helm-chart-push-zhi-nexus/</url>
      
        <content type="html"><![CDATA[<ul><li><p>直接 push</p><ul><li><p>語法</p><pre><code>helm nexus-push {helm repo 名稱} {helm chart} -u {帳號} -p</code></pre></li></ul><p><a href="https://blog.yowko.com/helm-push-nexus/">https://blog.yowko.com/helm-push-nexus/</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes configuration file is group-readable</title>
      <link href="/2021/07/29/kubernetes-configuration-file-is-group-readable/"/>
      <url>/2021/07/29/kubernetes-configuration-file-is-group-readable/</url>
      
        <content type="html"><![CDATA[<pre><code>&gt;&lt;&gt; chmod go-r ~/.kube/config</code></pre><p><a href="https://github.com/helm/helm/issues/9115">https://github.com/helm/helm/issues/9115</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes 删除namespace 后一直处于Terminating状态</title>
      <link href="/2021/06/12/kubernetes-shan-chu-namespace-hou-yi-zhi-chu-yu-terminating-zhuang-tai/"/>
      <url>/2021/06/12/kubernetes-shan-chu-namespace-hou-yi-zhi-chu-yu-terminating-zhuang-tai/</url>
      
        <content type="html"><![CDATA[<p>出现无法删除的情况，是因为 kubelet 阻塞，有其他的资源在使用该 namespace，比如 CRD 等，尝试重启 kubelet，再删除该 namespace 也不好使。</p><p>在尝试以下命令强制删除也不好使：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#!/usr/bin/env bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token keyword">echo</span> <span class="token string">"print input namespace"</span>  <span class="token keyword">exit</span> -1<span class="token keyword">fi</span>kubectl get ns <span class="token variable">$1</span> -ojson <span class="token operator">|</span> jq <span class="token string">'del(.spec.finalizers[0])'</span> <span class="token operator">></span> 0000.jsoncurl -k -H <span class="token string">"Content-Type: application/json"</span> -X PUT --data-binary @0000.json   http://127.0.0.1:8001/api/v1/namespaces/<span class="token variable">$1</span>/finalize<span class="token keyword">echo</span> kubectl delete ns <span class="token variable">$1</span></code></pre><pre class=" language-null"><code class="language-null">kubectl delete ns <terminating-namespace> ```解决：1.&nbsp;运行以下命令以查看处于“Terminating”状态的namespace：```null kubectl get namespaces```2.&nbsp;选择一个Terminating namespace，并查看namespace 中的finalizer。运行以下命令：```null kubectl get namespace <terminating-namespace> -o yaml```得到类似信息如下：```nullcreationTimestamp: "2019-11-20T15:18:06Z"deletionTimestamp: "2020-01-16T02:50:02Z"name: <terminating-namespace>resourceVersion: "3249493"selfLink: /api/v1/namespaces/knative-eventinguid: f300ea38-c8c2-4653-b432-b66103e412db</code></pre><ol start="3"><li>导出 json 格式到 tmp.json:</li></ol><pre class=" language-null"><code class="language-null"> kubectl get namespace <terminating-namespace> -o json >tmp.json</code></pre><ol start="4"><li>编辑 tmp.josn，删除 finalizers 字段的值：</li></ol><pre class=" language-null"><code class="language-null">{    "apiVersion": "v1",    "kind": "Namespace",    "metadata": {        "creationTimestamp": "2021-06-10T01:40:35Z",        "deletionGracePeriodSeconds": 0,        "deletionTimestamp": "2021-06-12T02:56:40Z",        "finalizers": [        ],        "labels": {            "kubesphere.io/namespace": "kubesphere-monitoring-system",            "kubesphere.io/workspace": "system-workspace"        },        "managedFields": [            {                "apiVersion": "v1",                "fieldsType": "FieldsV1",                "fieldsV1": {                    "f:metadata": {                        "f:labels": {                            ".": {},                            "f:kubesphere.io/namespace": {},                            "f:kubesphere.io/workspace": {}                        }                    }                },                "manager": "kubectl",                "operation": "Update",                "time": "2021-06-10T01:40:47Z"            },            {                "apiVersion": "v1",                "fieldsType": "FieldsV1",                "fieldsV1": {                    "f:metadata": {                        "f:finalizers": {                            ".": {},                            "v:\"finalizers.kubesphere.io/namespaces\"": {}                        },                        "f:ownerReferences": {                            ".": {},                            "k:{\"uid\":\"a6a748bd-e55f-4139-b3ff-d50269c969c5\"}": {                                ".": {},                                "f:apiVersion": {},                                "f:blockOwnerDeletion": {},                                "f:controller": {},                                "f:kind": {},                                "f:name": {},                                "f:uid": {}                            }                        }                    }                },                "manager": "controller-manager",                "operation": "Update",                "time": "2021-06-10T01:46:14Z"            },            {                "apiVersion": "v1",                "fieldsType": "FieldsV1",                "fieldsV1": {                    "f:status": {                        "f:phase": {}                    }                },                "manager": "kube-controller-manager",                "operation": "Update",                "time": "2021-06-12T03:01:42Z"            }        ],        "name": "kubesphere-monitoring-system",        "ownerReferences": [            {                "apiVersion": "tenant.kubesphere.io/v1alpha1",                "blockOwnerDeletion": true,                "controller": true,                "kind": "Workspace",                "name": "system-workspace",                "uid": "a6a748bd-e55f-4139-b3ff-d50269c969c5"            }        ],        "resourceVersion": "27410085",        "selfLink": "/api/v1/namespaces/kubesphere-monitoring-system",        "uid": "a148512f-54d3-4443-ae89-91cb97c6d6c2"    },    "spec": {},    "status": {        "conditions": [            {                "lastTransitionTime": "2021-06-12T02:57:16Z",                "message": "All resources successfully discovered",                "reason": "ResourcesDiscovered",                "status": "False",                "type": "NamespaceDeletionDiscoveryFailure"            },            {                "lastTransitionTime": "2021-06-12T02:57:16Z",                "message": "All legacy kube types successfully parsed",                "reason": "ParsedGroupVersions",                "status": "False",                "type": "NamespaceDeletionGroupVersionParsingFailure"            },            {                "lastTransitionTime": "2021-06-12T03:01:42Z",                "message": "All content successfully deleted, may be waiting on finalization",                "reason": "ContentDeleted",                "status": "False",                "type": "NamespaceDeletionContentFailure"            },            {                "lastTransitionTime": "2021-06-12T03:01:42Z",                "message": "All content successfully removed",                "reason": "ContentRemoved",                "status": "False",                "type": "NamespaceContentRemaining"            },            {                "lastTransitionTime": "2021-06-12T02:57:16Z",                "message": "All content-preserving finalizers finished",                "reason": "ContentHasNoFinalizers",                "status": "False",                "type": "NamespaceFinalizersRemaining"            }        ],        "phase": "Terminating"    }}</code></pre><ol start="5"><li>开启 proxy :</li></ol><pre class=" language-null"><code class="language-null">kubectl proxy```6\. 打开新的terminal 窗口，运行以下命令：```nullcurl -k -H "Content-Type: application/json" -X PUT --data-binary @tmp.json http://127.0.0.1:8001/api/v1/namespaces/<terminating-namespace>/finalize</code></pre><p>输出以下信息：</p><pre class=" language-null"><code class="language-null">"selfLink": "/api/v1/namespaces/istio-system/finalize","uid": "2e274537-727f-4a8f-ae8c-397473ed619a","resourceVersion": "3249492","creationTimestamp": "2019-11-20T15:18:06Z","deletionTimestamp": "2020-01-16T02:50:02Z"```7\. 检查该namespace 是否被删除：```null kubectl get namespaces</code></pre><p>继续以上步骤删除其他 Terminating namespace。<br><a href="https://blog.csdn.net/ANXIN997483092/article/details/104233494">https://blog.csdn.net/ANXIN997483092/article/details/104233494</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven: POM files without a version in it? - SoftwareEntwicklung Beratung Schulung</title>
      <link href="/2021/05/12/maven-pom-files-without-a-version-in-it-softwareentwicklung-beratung-schulung/"/>
      <url>/2021/05/12/maven-pom-files-without-a-version-in-it-softwareentwicklung-beratung-schulung/</url>
      
        <content type="html"><![CDATA[<p>In Maven 3.2.5 a feature has been introduced to be able to define a version of a Maven project via properties <code>${revision}</code>, <code>${sha1}</code> and <code>${changelist}</code> which unfortuantely had some issues. Those issues have been fixed with <a href="https://maven.apache.org/docs/3.5.0-beta-1/release-notes.html">Maven 3.5.0-beta-1</a> and now you can define the version of a project by using the following properties: <code>${revision}</code>, <code>${sha1}</code> and <code>${changelist}</code>. The example below will show one usage of this:</p><pre><code>  ..  &lt;parent&gt;    &lt;groupId&gt;com.soebes.smpp&lt;/groupId&gt;    &lt;artifactId&gt;smpp&lt;/artifactId&gt;    &lt;version&gt;2.2.1&lt;/version&gt;  &lt;/parent&gt;  &lt;groupId&gt;com.soebes.examples.j2ee&lt;/groupId&gt;  &lt;artifactId&gt;parent&lt;/artifactId&gt;  &lt;version&gt;${revision}&lt;/version&gt;  &lt;packaging&gt;pom&lt;/packaging&gt;  ..</code></pre><p>For the simplicity of this example I use only <code>${revision}</code> but in practice you could combine the different properties.</p><p>The above is a parent of a larger multi module build which contains serveral childs which look like this:</p><pre><code>  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;parent&gt;    &lt;groupId&gt;com.soebes.examples.j2ee&lt;/groupId&gt;    &lt;artifactId&gt;parent&lt;/artifactId&gt;    &lt;version&gt;${revision}&lt;/version&gt;  &lt;/parent&gt;  &lt;artifactId&gt;service&lt;/artifactId&gt;  &lt;dependencies&gt;    &lt;dependency&gt;      &lt;groupId&gt;com.soebes.examples.j2ee&lt;/groupId&gt;      &lt;artifactId&gt;service-client&lt;/artifactId&gt;      &lt;version&gt;${project.version}&lt;/version&gt;    &lt;/dependency&gt;    ...   ..</code></pre><p>Based on the above you can now build your project simply by using the following:</p><pre><code>mvn -Drevision=1.0.0-SNAPSHOT clean package</code></pre><p>So there is no need to change the pom files and check them in. But there exists a drawback. You need to define the <code>-Drevision=...</code> for each call of Maven which is not very convenient.</p><p>Starting with <a href="https://maven.apache.org/docs/3.3.1/release-notes.html#JVM_and_Command_Line_Options">Maven 3.3.1</a> you can configure Maven command line parameters in a <code>.mvn/maven.config</code> file which could contain the version definition like this:</p><pre><code>-Drevision=1.0.0-SNAPSHOT</code></pre><p>So with Maven 3.3.1+ you can now simply call Maven via:</p><pre><code>mvn clean package</code></pre><p>More convenient?</p><p>Hm… wait a second. What if i like to create a different version? Yes you need to change the <code>.mvn/maven.config</code> file and you should of course checkin the change into your <a href="https://en.wikipedia.org/wiki/Version_control">vcs</a>.</p><p>No. This is not really needed, but recommended. You can overwrite the version which is defined in the <code>.mvn/maven.config</code> via command line like this:</p><pre><code>mvn clean package -Drevision=2.0.0-SNAPSHOT</code></pre><p>What kind of alternatives exist? You can of course define your version of your project as a property within your pom file itself.</p><pre><code>  ..  &lt;parent&gt;    &lt;groupId&gt;com.soebes.smpp&lt;/groupId&gt;    &lt;artifactId&gt;smpp&lt;/artifactId&gt;    &lt;version&gt;2.2.1&lt;/version&gt;  &lt;/parent&gt;  &lt;groupId&gt;com.soebes.examples.j2ee&lt;/groupId&gt;  &lt;artifactId&gt;parent&lt;/artifactId&gt;  &lt;version&gt;${revision}&lt;/version&gt;  &lt;packaging&gt;pom&lt;/packaging&gt;  ..  &lt;properties&gt;    ...    &lt;revision&gt;2.5.0-SNAPSHOT&lt;/revision&gt;  &lt;/properties&gt;</code></pre><p>So this means you do not need to have a supplemental file in your project (like <code>.mvn/maven.config</code>) if you not already have. Also for this property means you can overwrite it via command like this:</p><pre><code>mvn clean package -Drevision=1.8.67-SNAPSHOT</code></pre><h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><p>But now let us come to an important point of this whole story. What happens if you do an <code>deploy</code> of such things via:</p><pre><code>mvn clean deploy -Drevision=1.8.67-SNAPSHOT</code></pre><p>The result in your repository will be having pom files which contain <code>${revision}</code> which is simply not correct and can cause other issues.</p><p>How to solve this problem? This can simply being achieved by using the <a href="https://www.mojohaus.org/flatten-maven-plugin/">flatten-maven-plugin</a> and adding the following part to your pom file:</p><pre><code>&lt;build&gt;  &lt;plugins&gt;    &lt;plugin&gt;      &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;      &lt;artifactId&gt;flatten-maven-plugin&lt;/artifactId&gt;      &lt;version&gt;1.0.0&lt;/version&gt;      &lt;configuration&gt;        &lt;updatePomFile&gt;true&lt;/updatePomFile&gt;      &lt;/configuration&gt;      &lt;executions&gt;        &lt;execution&gt;          &lt;id&gt;flatten&lt;/id&gt;          &lt;phase&gt;process-resources&lt;/phase&gt;          &lt;goals&gt;            &lt;goal&gt;flatten&lt;/goal&gt;          &lt;/goals&gt;        &lt;/execution&gt;        &lt;execution&gt;          &lt;id&gt;flatten.clean&lt;/id&gt;          &lt;phase&gt;clean&lt;/phase&gt;          &lt;goals&gt;            &lt;goal&gt;clean&lt;/goal&gt;          &lt;/goals&gt;        &lt;/execution&gt;      &lt;/executions&gt;    &lt;/plugin&gt;  &lt;/plugins&gt;&lt;/build&gt;</code></pre><p>By using the above you can now simply do a deploy via:</p><pre><code>mvn clean deploy -Drevision=1.8.67-SNAPSHOT</code></pre><p>and the resulting pom file within the repository will correctly contain the resolved version <code>1.8.67-SNASPHOT</code>.</p><p>This makes it easy to change the version from within a CI/CD tool. For example in Jenkins you can add a parameter like this:</p><pre><code>mvn clean package -Drevision=1.0-${BUILD_NUMBER}-SNAPSHOT</code></pre><p>Or make more sophisticated combinations of the properties <code>${revision}</code>, <code>${sha1}</code> and <code>${changelist}</code>.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In the end you are not able to completely ban the versions from your pom file but nearly 100% which means you do not need to repeat it in each of your parent entries in a multi module build.</p><p>Furthermore you have saved a lot of issues related to merge conflicts within branches in Maven builds caused by the different version number for the different branches, cause the version can simply being defined by the CI/CD solution or manually from command line.<br><a href="https://blog.soebes.de/blog/2017/04/02/maven-pom-files-without-a-version-in-it/">https://blog.soebes.de/blog/2017/04/02/maven-pom-files-without-a-version-in-it/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Adding a Static Route to macOS</title>
      <link href="/2021/04/22/adding-a-static-route-to-macos/"/>
      <url>/2021/04/22/adding-a-static-route-to-macos/</url>
      
        <content type="html"><![CDATA[<p>Executed from Terminal</p><pre><code>sudo route -n add -net 10.0.0.0/8 x.x.x.x</code></pre><p>x.x.x.x is the IP address of the Cisco/Luxul switch with Just Add Power devices attached</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><ol><li><p>For a J+P Network of 10.0.0.0, subnet mask 255.0.0.0 and switch IP 192.168.0.254</p><p>sudo route -n add -net 10.0.0.0/8 192.168.0.254</p></li><li><p>For a J+P Network of 172.16.0.0, subnet mask 255.255.0.0 and switch IP 192.168.1.49</p><p>sudo route -n add -net 172.16.0.0/16 192.168.1.49</p></li></ol><p><a href="https://support.justaddpower.com/kb/article/320-adding-a-static-route-to-macos/">https://support.justaddpower.com/kb/article/320-adding-a-static-route-to-macos/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tcpdump linux抓http请求头_a18827547638的博客-CSDN博客</title>
      <link href="/2021/04/22/tcpdump-linux-zhua-http-qing-qiu-tou-a18827547638-de-bo-ke-csdn-bo-ke/"/>
      <url>/2021/04/22/tcpdump-linux-zhua-http-qing-qiu-tou-a18827547638-de-bo-ke-csdn-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>tcpdump -i eth0 port 80 -s 1024 -l -A<img src="https://images0.cnblogs.com/blog2015/377842/201505/041838087046251.png"><br><a href="https://blog.csdn.net/a18827547638/article/details/85715580">https://blog.csdn.net/a18827547638/article/details/85715580</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jenkins反向代理配置有误问题修复</title>
      <link href="/2021/03/18/jenkins-fan-xiang-dai-li-pei-zhi-you-wu-wen-ti-xiu-fu/"/>
      <url>/2021/03/18/jenkins-fan-xiang-dai-li-pei-zhi-you-wu-wen-ti-xiu-fu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>需要一个持续集成的工具，所以部署了一个 jenkins。由于服务器上本身存在一个 nginx，所以 jenkins 我部署了反向代理，但是每次访问后台都有这样一个错误，不胜其烦。</p></blockquote><p><code>An error message is displayed in the "Manage Jenkins" page - "It appears that your reverse proxy set up is broken"</code></p><p>出现这个错误以后，我们点击更多信息，进到官网的解释，看以看到有这么一个警告：</p><blockquote><p>Be sure to set the X-Forwarded-Proto header if your reverse proxy is accessed via HTTPS and then Jenkins itself is accessed via HTTP i.e. proxying HTTPS to HTTP. 这句话的大概意思是： 如果你的反向代理使用 https 访问，并且 jenkins 使用 http 访问，是代理 https 到 http，那么就一定要设置<code>X-Forwarded-Proto</code>这个请求头。</p></blockquote><pre><code>server {  listen 80;  server\_name jenkins.mydomain.com;  location / {    proxy\_pass http://jenkins.localnet:8080;    proxy\_read\_timeout  90;    proxy\_set\_header X\-Forwarded\-Host $host:$server\_port;    proxy\_set\_header X\-Forwarded\-Server $host;    proxy\_set\_header X\-Forwarded\-For $proxy\_add\_x\_forwarded\_for;    proxy\_set\_header X\-Forwarded\-Proto $scheme;    proxy\_set\_header X\-Real\-IP $remote\_addr;  }}</code></pre><p>文章作者<strong>ianzhi</strong>, 原文地址：<a href="https://www.dnote.cn/users/ianzhi/posts/jenkins">https://www.dnote.cn/users/ianzhi/posts/jenkins</a></p><p>文章版权归作者所有，转载请保留此声明。</p><p>本文参与<a href="https://cloud.tencent.com/developer/support-plan">腾讯云自媒体分享计划</a>，欢迎正在阅读的你也加入，一起分享。<br><a href="https://cloud.tencent.com/developer/article/1476876">https://cloud.tencent.com/developer/article/1476876</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用docker搭建smtp服务</title>
      <link href="/2021/03/17/shi-yong-docker-da-jian-smtp-fu-wu/"/>
      <url>/2021/03/17/shi-yong-docker-da-jian-smtp-fu-wu/</url>
      
        <content type="html"><![CDATA[<p>前段时间搭建 gitlab 服务 harbor 仓库，需要用到 SMTP 服务用于发送邮件，用的自己办公邮箱做的测试，给别人自动发的邮件显示的是自己的邮箱。。。不正规 😋 申请公司的公共邮箱流程太繁琐了 😥 还是自己搭建一个 SMTP 服务吧，自己动手丰衣足食。</p><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><h2 id="服务编排"><a href="#服务编排" class="headerlink" title="服务编排"></a>服务编排</h2><p>采用<code>docker-compose</code>进行服务编排 启动<code>docker-compose up -d</code> or <code>docker-compose -f docker-compose.yml up -d</code></p><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><pre class=" language-shell"><code class="language-shell">.├── conf│&nbsp;&nbsp; ├── hosts│&nbsp;&nbsp; └── resolv.conf├── docker-compose.yml├── README.md└── smtp.py1 directory, 5 files</code></pre><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><pre class=" language-yml"><code class="language-yml">version: '3'services:  SMTP:    image: namshi/smtp    container_name: SMTP    restart: always    ports:      - "10025:25"    environment:      RELAY_NETWORKS: :0.0.0.0/0    volumes:      - ./conf/hosts:/etc/hosts      - ./conf/resolv.conf:/etc/resolv.conf</code></pre><ul><li>1. 用为没有加密，所有就把默认的 25 端口给换个端口映射到宿主机，再说反正是公司内网环境。。。😎</li><li>2.RELAY_NETWORKS 这个环境变量的作用是负责发件请求的拦截，当设置为 “:0.0.0.0/0” 时表示任意客户端皆可发起发件请求 😁</li><li>3. 指定主机域，不然发送出去的邮件，发件人为<code>Mail Delivery System &lt;Mailer-Daemon@c4de06bf41e5&gt;</code>，添加主机名后就可以伪造发件人啦 🤔</li><li>4. 邮件发送搜索 goertek.com 的域，因为公司内网 DNS 的 MX 邮件解析问题，在内网找不到要发送给内网邮箱用户的 MX 记录。。。就是内网找不到 <a href="mailto:xxx@goertek.com">xxx@goertek.com</a> 的 MX 记录，所以指定 DNS 解析 resolv.conf🌚</li></ul><h3 id="hosts"><a href="#hosts" class="headerlink" title="hosts"></a>hosts</h3><h3 id="resolv-conf"><a href="#resolv-conf" class="headerlink" title="resolv.conf"></a>resolv.conf</h3><pre class=" language-txt"><code class="language-txt">search goertek.comoptions ndots:0nameserver 114.114.114.114</code></pre><h3 id="smtp-py"><a href="#smtp-py" class="headerlink" title="smtp.py"></a>smtp.py</h3><p>测试 py</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> Header<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMETextsender <span class="token operator">=</span> <span class="token string">'willson-wu-shi-ge-dao-lao-ma?@goertek.local'</span>receivers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'willson.wu@goertek.com'</span><span class="token punctuation">]</span>message <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span><span class="token string">'SMTP服务邮件发送测试...  请勿回复！'</span><span class="token punctuation">,</span> <span class="token string">'plain'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>subject <span class="token operator">=</span> <span class="token string">'SMTP服务邮件测试'</span>message<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    smtpObj <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token string">'10.10.192.18'</span><span class="token punctuation">,</span> <span class="token number">10025</span><span class="token punctuation">)</span>    smtpObj<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> receivers<span class="token punctuation">,</span> message<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"邮件发送成功"</span><span class="token punctuation">)</span><span class="token keyword">except</span> smtplib<span class="token punctuation">.</span>SMTPException<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Error: 无法发送邮件"</span><span class="token punctuation">)</span></code></pre><p>执行测试<code>python3 smtp.py</code> 亲测内网环境下发邮件没问题！满足需求！ 这下搭建的服务都可以配置 SMTP 邮件通知啦！👌</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>镜像<a href="https://hub.docker.com/r/namshi/smtp">namshi/smtp</a> docker hub 上 pulls 10M+</li><li>镜像作者的<a href="https://github.com/namshi/docker-smtp">GayHub</a></li><li><a href="https://zhuanlan.zhihu.com/p/34162708">使用 Docker 搭建 SMTP 服务器</a><br><a href="https://weii.xyz/2019/08/31/docker_install_smtp_server/">https://weii.xyz/2019/08/31/docker_install_smtp_server/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SSO场景系列：实现Microsoft AD到阿里云的单点登录-阿里云开发者社区</title>
      <link href="/2021/03/11/sso-chang-jing-xi-lie-shi-xian-microsoft-ad-dao-a-li-yun-de-dan-dian-deng-lu-a-li-yun-kai-fa-zhe-she-qu/"/>
      <url>/2021/03/11/sso-chang-jing-xi-lie-shi-xian-microsoft-ad-dao-a-li-yun-de-dan-dian-deng-lu-a-li-yun-kai-fa-zhe-she-qu/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong> 在文章合规与安全：阿里云与企业身份系统的集成中，我们介绍了阿里云与企业身份系统的集成，可以配置云账号下的子账号通过企业身份系统登陆。本文以 Windows Server 2012 R2 为例，介绍如何配置 Microsoft AD 作为阿里云的单点登录 IdP。</p><p>【更新：随着 RAM 2.0 的上线，阿里云官网提供了对 SAML Federation 的官方技术文档，读者可以参考：<a href="https://help.aliyun.com/document_detail/96239.html">https://help.aliyun.com/document_detail/96239.html</a> ，同时推荐用户使用 RAM 控制台进行配置，原企业控制台（公测）将逐步下线】</p><p>在文章<a href="https://yq.aliyun.com/articles/334240">合规与安全：阿里云与企业身份系统的集成</a>中，我们介绍了阿里云与企业身份系统的集成，可以配置云账号下的子账号通过企业身份系统登陆。配置要点是</p><ol><li> 在阿里云目录中配置可信企业 SAML IdP</li><li> 在企业 IdP 中配置阿里云为可信 SAML SP</li></ol><p>其中第二点在不同的身份系统中有不同的配置方法。本文以 Windows Server 2012 R2 为例，介绍如何配置 Microsoft AD 作为阿里云的单点登录 IdP。</p><p>本文假定用户对 Microsoft AD 做了合理正确的配置，在 Windows Server 2012 R2 上配置了以下 Server Role</p><ul><li>DNS 服务器：DNS 服务器用来将身份认证请求解析到正确的 Federation Service 上</li><li>Active Directory 域服务 (AD DS)：域服务提供对域用户和域设备等对象的创建，查询和修改等功能</li><li>Active Directory Federation Service (AD FS)：Federation Service 提供配置联合身份认证依赖方的功能，并对配置好的依赖方提供单点登录认证。</li></ul><p>针对配置 Active Directory 的疑问，用户可以参考微软官方文档或者搜索相关的第三方博客。</p><p>示例中用到相关配置如下</p><ol><li> 云账号的目录默认域名为<code>junpu.onaliyun.com</code></li><li> 云账号下包含子用户 junpu.chen，其完整的 User Principal Name（UPN）为 <a href="mailto:junpu.chen@junpu.onaliyun.com">junpu.chen@junpu.onaliyun.com</a></li><li> 自建 Microsoft AD 中的 AD FS 服务名称是<code>adserver.testdomain.com</code>。</li><li> 自建 Microsoft AD 的域名为 <code>testdomain.com</code>，NETBIOS 名为<code>testdomain</code>。</li><li> 用户 junpu.chen 在 AD 中的 UPN 为<code>junpu.chen@testdomain.com</code>，域内登陆也可以使用<code>testdomain\junpu.chen</code></li></ol><p>在浏览器中输入如下地址</p><pre class=" language-null"><code class="language-null">https://adserver.testdomain.com/FederationMetadata/2007-06/FederationMetadata.xml```将元数据XML文件下载存储到本地，并按照[合规与安全：阿里云与企业身份系统的集成](https://yq.aliyun.com/articles/334240)中介绍的流程，将下载好的IdP元数据文档配置到阿里云目录中。完成这一步之后，阿里云目录则对示例中的AD FS产生了单向信任。如果用户在阿里云子用户登陆页面输入junpu.chen@junpu.onaliyun.com，阿里云则会向AD FS发出SAML认证请求，但是AD FS此时并不信任阿里云，因此AD FS会报出如下错误![](https://yqfile.alicdn.com/00059c8a312485453055589e0a495167cd8fba41.png)在Microsoft的AD FS语境中，SAML SP被称作Relying Party（依赖方，信赖方），这是因为AD FS支持OAuth/OIDC/WS-Federation，而这三个协议中的单点登录消费方都被称作Relying Party，因此AD FS在对SAML协议支持中并没有采用SAML特有的术语Service Provider，而是统一采用Relying Party来指定不同协议中的单点登录消费方。创建阿里云作为AD FS的可信SP步骤如下第一步：在服务器管理器中的`工具`菜单中打开`AD FS管理`![](https://yqfile.alicdn.com/ceaa91547be1f30a60c044335c8b3e1f86759a0d.png)第二步：在AD FS管理工具中添加`信赖方信任`（Relying Party Trust）![](https://yqfile.alicdn.com/803a8014b1dccd1101faeea5516dc79dae9f62ce.png)第三步：为新创建的信赖方设置阿里云的SAML元数据信赖方可以直接配置元数据的URL，或者将阿里云SAML元数据下载之后，为信赖方配置下载好的XML文件。阿里云SAML元数据的URL可以通过以下方式获取：1.  登录 RAM 控制台。2.  单击人员管理 > 设置 > 高级设置，在SSO 登录设置下可以查看当前云账号的SAML 服务提供方元数据 URL。完成配置信赖方之后，阿里云和AD FS就产生了互信，阿里云会将`junpu.onaliyun.com`目录内的用户认证请求转发到AD FS `adserver.testdomain.com`上，AD FS也会接受来自于阿里云的认证请求并向阿里云转发认证响应。接下来需要对信赖方配置SAML断言中需要颁发的属性。为了让阿里云能使用SAML响应定位到云目录中的子用户，我们需要SAML断言中的NameID字段取值为云目录中子用户的UPN。配置Active Directory中的UPN为SAML断言中的NameID--------------------------------------在这里，微软用了`Claim`（声明）这一术语来指代SAML断言中的属性。这是因为AD FS支持的其他协议（OAuth，WS-Fed等）也都使用Claim来表达Token中的字段。第一步：为信赖方编辑声明规则所谓`声明规则`，指的是`Claims Rule`，也就是SAML断言中的声明（属性）是怎样从Active Directory的用户属性中生成的。![](https://yqfile.alicdn.com/bcb027436fa07fe1e2f7f428a63d1ec0b006d8e2.png)第二步：添加`颁发转换规则`所谓`颁发转换规则`，指的是`Issuance Transformation Rule`，指的是如何将一个已知的用户属性，经过转换之后，颁发为SAML断言中的属性。由于我们要将用户在AD中的UPN颁发为NameID，因此需要添加一个新的规则![](https://yqfile.alicdn.com/db8a9e3857adb8ca8433e14f0f45aa677bba5703.png)规则的模版为`转换传入声明`![](https://yqfile.alicdn.com/f034527f2107002104b0c063f1362785ad8735b5.png)**到这里，由于我们示例中的云账号里的UPN域名为`junpu.onaliyun.com`，而AD中的UPN域名为`testdomain.com`，显然如果直接将AD中的User Principal Name映射为NameID会让阿里云无法匹配到正确的子账号用户。**我们提供两个路径来填补这一空白。### 路径一：在阿里云目录中验证AD域名如果域名`testdomain.com`是一个在公网DNS中注册的域名，那么用户可以在阿里云目录中验证自己对域名的所有权。进入企业控制台的`人员目录`\>`域名设置`\>`创建域别名`。![](https://yqfile.alicdn.com/aea1d909b9c155b0b26852295a444f0f38edd828.png)验证通过之后，阿里云目录的默认域`junpu.onaliyun.com`则有了一个域别名`testdomain.com`。子用户junpu.chen的UPN为junpu.chen@testdomain.com。验证域名之后的云目录则可以在域名上与自建AD DS保持一致：云目录子用户的UPN与AD中用户的UPN都使用`testdomain.com`这个域名。完成这个设置后，我们回到上面的声明转换规则编辑中，将UPN映射为NameID（名称ID）。![](https://yqfile.alicdn.com/78628160cbd087546a2591cc80e91d1bc02d079c.png)### 路径二：将AD中的User Principal Name的域名转换后颁发为NameID如果域名`testdomain.com`是企业的内网域名，那么阿里云将无法验证企业对域名的所有权。云目录就只能采用`onaliyun.com`下的子域名。在这种情况下，在AD FS给阿里云颁发的SAML断言中就必须将UPN的域名后缀从`testdomain.com`替换为`junpu.onaliyun.com`（假定用户名一一对应）![](https://yqfile.alicdn.com/e17b1fcd17580b5a383670db373e0af467d0460d.png)在笔者的示例中，自建AD`testdomain.com`这一域名是内网域名，通过上述路径二对断言属性进行映射之后，从自建AD的内网访问阿里云，在子账号登陆中输入`junpu.chen@junpu.onaliyun.com`![](https://yqfile.alicdn.com/ff3f6bf1839a7ed7101122767c36fdff853ee9ce.png)阿里云将认证请求转发给adserver.testdomain.com![](https://yqfile.alicdn.com/6dee0202ad813b7e0c7a84bfb36ac036c859eccd.png)输入AD内的用户名`junpu.chen@testdomain.com`和密码之后，就完成了登陆回到阿里云控制台![](https://yqfile.alicdn.com/6d25c67c7aa0089e8e33dff3b8ef9b2ff6c7615e.png)由于企业自建AD配置上可能有所不同，因此可能需要编辑略有不同的声明规则。但是最终的目标都是让SAML响应中能够返回阿里云目录可以识别的子账号UPN。这里列出一些常见的问题*   如果没有配置声明规则，导致SAML断言中缺失NameID字段```null无法解析外部身份提供商签发的认证信息。: Unable to understand SAML response```*   如果SAML断言中的NameID域名与云目录并不一致```null您的阿里云目录的外部单点登录配置无效，请联系管理员。: {"domainName":"testdomain.com"}```**版权声明：** 本文内容由阿里云实名注册用户自发贡献，版权归原作者所有，阿里云开发者社区不拥有其著作权，亦不承担相应法律责任。具体规则请查看《[阿里云开发者社区用户服务协议](https://developer.aliyun.com/article/768092)》和《[阿里云开发者社区知识产权保护指引](https://developer.aliyun.com/article/768093)》。如果您发现本社区中有涉嫌抄袭的内容，填写[侵权投诉表单](https://yida.alibaba-inc.com/o/right)进行举报，一经查实，本社区将立刻删除涉嫌侵权内容。 [https://developer.aliyun.com/article/334241](https://developer.aliyun.com/article/334241)</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Collecting Docker Logs With Loki</title>
      <link href="/2021/03/07/collecting-docker-logs-with-loki/"/>
      <url>/2021/03/07/collecting-docker-logs-with-loki/</url>
      
        <content type="html"><![CDATA[<h3 id="Setup-Loki-Container"><a href="#Setup-Loki-Container" class="headerlink" title="Setup Loki Container"></a><a href="#Setup-Loki-Container" title="Setup Loki Container"></a>Setup Loki Container</h3><p>First of all, we will need to define a Loki container in the <code>docker-compose.yml</code>. The command part tells Loki to read the config from the <code>local-config.yaml</code> which is added as a volume.</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">loki</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> loki    <span class="token key atrule">image</span><span class="token punctuation">:</span> grafana/loki<span class="token punctuation">:</span>latest    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3100:3100"</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>config.file=/etc/loki/local<span class="token punctuation">-</span>config.yaml    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./volumes/loki/etc<span class="token punctuation">:</span>/etc/loki</code></pre><p>The <code>local-config.yaml</code> is a default from the <a href="https://github.com/grafana/loki/blob/master/docs/configuration/README.md">Loki Github page</a>.</p><p>Here is an example config.</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">auth_enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">http_listen_port</span><span class="token punctuation">:</span> <span class="token number">3100</span>  <span class="token key atrule">log_level</span><span class="token punctuation">:</span> error<span class="token key atrule">ingester</span><span class="token punctuation">:</span>  <span class="token key atrule">lifecycler</span><span class="token punctuation">:</span>    <span class="token key atrule">address</span><span class="token punctuation">:</span> 127.0.0.1    <span class="token key atrule">ring</span><span class="token punctuation">:</span>      <span class="token key atrule">kvstore</span><span class="token punctuation">:</span>        <span class="token key atrule">store</span><span class="token punctuation">:</span> inmemory      <span class="token key atrule">replication_factor</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">final_sleep</span><span class="token punctuation">:</span> 0s  <span class="token key atrule">chunk_idle_period</span><span class="token punctuation">:</span> 5m  <span class="token key atrule">chunk_retain_period</span><span class="token punctuation">:</span> 30s<span class="token key atrule">schema_config</span><span class="token punctuation">:</span>  <span class="token key atrule">configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">from</span><span class="token punctuation">:</span> <span class="token datetime number">2018-04-15</span>      <span class="token key atrule">store</span><span class="token punctuation">:</span> boltdb      <span class="token key atrule">object_store</span><span class="token punctuation">:</span> filesystem      <span class="token key atrule">schema</span><span class="token punctuation">:</span> v9      <span class="token key atrule">index</span><span class="token punctuation">:</span>        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> index_        <span class="token key atrule">period</span><span class="token punctuation">:</span> 168h<span class="token key atrule">storage_config</span><span class="token punctuation">:</span>  <span class="token key atrule">boltdb</span><span class="token punctuation">:</span>    <span class="token key atrule">directory</span><span class="token punctuation">:</span> /tmp/loki/index  <span class="token key atrule">filesystem</span><span class="token punctuation">:</span>    <span class="token key atrule">directory</span><span class="token punctuation">:</span> /tmp/loki/chunks<span class="token key atrule">limits_config</span><span class="token punctuation">:</span>  <span class="token key atrule">enforce_metric_name</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">reject_old_samples</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">reject_old_samples_max_age</span><span class="token punctuation">:</span> 168h<span class="token key atrule">chunk_store_config</span><span class="token punctuation">:</span>  <span class="token key atrule">max_look_back_period</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token key atrule">table_manager</span><span class="token punctuation">:</span>  <span class="token key atrule">chunk_tables_provisioning</span><span class="token punctuation">:</span>    <span class="token key atrule">inactive_read_throughput</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">inactive_write_throughput</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">provisioned_read_throughput</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">provisioned_write_throughput</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token key atrule">index_tables_provisioning</span><span class="token punctuation">:</span>    <span class="token key atrule">inactive_read_throughput</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">inactive_write_throughput</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">provisioned_read_throughput</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">provisioned_write_throughput</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token key atrule">retention_deletes_enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">retention_period</span><span class="token punctuation">:</span> <span class="token number">0</span></code></pre><h3 id="Adding-Loki-as-a-Logging-Driver"><a href="#Adding-Loki-as-a-Logging-Driver" class="headerlink" title="Adding Loki as a Logging Driver"></a><a href="#Adding-Loki-as-a-Logging-Driver" title="Adding Loki as a Logging Driver"></a>Adding Loki as a Logging Driver</h3><p>To ship logs to Loki automatically for every container we add to our setup, we need to add the loki logging driver.<br>The easiest way to add the loki logging driver is with a docker plugin.</p><pre class=" language-shell"><code class="language-shell">docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions</code></pre><p>Don’t forget to restart the docker daemon after installing the plugin.</p><p>If you are on Mac:</p><pre class=" language-shell"><code class="language-shell">killall Docker && open /Applications/Docker.app</code></pre><p>If you are on Linux:</p><pre class=" language-shell"><code class="language-shell">sudo systemctl restart docker</code></pre><p>After installing the plugin, verify it is enabled.</p><pre class=" language-shell"><code class="language-shell">docker plugin ls</code></pre><p>Should output</p><pre class=" language-plain"><code class="language-plain">ID                  NAME                DESCRIPTION           ENABLED412df8a79e8e        loki:latest         Loki Logging Driver   true</code></pre><h3 id="Using-Loki-as-a-Logging-Driver"><a href="#Using-Loki-as-a-Logging-Driver" class="headerlink" title="Using Loki as a Logging Driver"></a><a href="#Using-Loki-as-a-Logging-Driver" title="Using Loki as a Logging Driver"></a>Using Loki as a Logging Driver</h3><p>There are two ways, I will cover, to change the logging driver, either directly in the docker compose file or in the daemon.json file of the docker daemon.</p><h4 id="Docker-compose-yaml"><a href="#Docker-compose-yaml" class="headerlink" title="Docker-compose.yaml"></a><a href="#Docker-compose-yaml" title="Docker-compose.yaml"></a>Docker-compose.yaml</h4><p>The default driver is json-file, but we can easily change it to loki, thanks to the docker plugin we installed earlier.<br>The loki-url option tells where to ship the logs, which in this case is to our local loki instance.<br>For a complete options list check the <a href="https://github.com/grafana/loki/tree/master/cmd/docker-driver#log-opt-options">loki logging driver options</a></p><p>An easier way to reuse the logging section since docker-compose version 3.4, is the <code>x-</code> extension fields and yaml anchors and aliases.<br>The <code>x-</code> extension field tells docker compose to ignore the section that follows it.<br>Anchors are identified by an <code>&amp;</code> character, and aliases by an <code>*</code> character.<br>Define an extension field at the top of your <code>docker-compose.yml</code> with an anchor after it and reuse it using the alias on all services.</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">x-logging</span><span class="token punctuation">:</span> <span class="token important">&amp;logging</span>  <span class="token key atrule">logging</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> loki    <span class="token key atrule">options</span><span class="token punctuation">:</span>      <span class="token key atrule">loki-url</span><span class="token punctuation">:</span> <span class="token string">"http://host.docker.internal:3100/loki/api/v1/push"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">my_service</span><span class="token punctuation">:</span>    <span class="token important">*logging</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> xxx    <span class="token key atrule">image</span><span class="token punctuation">:</span> xxx/xxx  <span class="token key atrule">another_cool_service</span><span class="token punctuation">:</span>    <span class="token important">*logging</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> xxxx    <span class="token key atrule">image</span><span class="token punctuation">:</span> xxxx/xxxx</code></pre><h4 id="Daemon-json"><a href="#Daemon-json" class="headerlink" title="Daemon.json"></a><a href="#Daemon-json" title="Daemon.json"></a>Daemon.json</h4><p>We can also change the default logging driver for all containers in a file called <code>daemon.json</code>. If you are on Mac its located at <code>~/.docker/daemon.json</code><br>If you are on linux its located at <code>/etc/docker/daemon.json</code></p><p>Example of daemon.json.<br>Don’t forget to restart the docker daemon afterwards.</p><p>I prefer adding the logging driver in the <code>docker-compose.yaml</code> directly, because I have more control over the logging driver on a single service level, whereas, with daemon.json, you change the logging driver for all containers.</p><h3 id="Running-Docker-with-Loki"><a href="#Running-Docker-with-Loki" class="headerlink" title="Running Docker with Loki"></a><a href="#Running-Docker-with-Loki" title="Running Docker with Loki"></a>Running Docker with Loki</h3><p>After you run <code>docker-compose up</code> all container logs will be sent to Loki.<br>One thing to note is, there is an error after running the containers, which says</p><pre class=" language-plain"><code class="language-plain">WARNING: no logs are available with the 'loki' log driver</code></pre><p>Nevertheless, all container logs are successfully sent to Grafana every time.<br>Because I use Loki in a development setup, I ignore this message, but if you want to run this in production, I would ensure that it is minor.<br>After all containers are up, you can still do <code>docker logs</code> command and it will work, so I am guessing the error above has something to do with container startup time.</p><h3 id="Adding-Loki-to-Grafana"><a href="#Adding-Loki-to-Grafana" class="headerlink" title="Adding Loki to Grafana"></a><a href="#Adding-Loki-to-Grafana" title="Adding Loki to Grafana"></a>Adding Loki to Grafana</h3><p>Login to your Grafana instance and add a new data source of type Loki. Make sure the Grafana can reach the Loki instance.<br><a href="https://yuriktech.com/2020/03/21/Collecting-Docker-Logs-With-Loki/adding-loki.png"><img src="https://yuriktech.com/2020/03/21/Collecting-Docker-Logs-With-Loki/adding-loki.png"></a></p><h3 id="Using-Loki-in-Grafana"><a href="#Using-Loki-in-Grafana" class="headerlink" title="Using Loki in Grafana"></a><a href="#Using-Loki-in-Grafana" title="Using Loki in Grafana"></a>Using Loki in Grafana</h3><p>After adding Loki as a data source, go to explore and you should see all containers appear with automatic labels set by the Loki logging driver.<br><a href="https://yuriktech.com/2020/03/21/Collecting-Docker-Logs-With-Loki/grafana-loki.png"><img src="https://yuriktech.com/2020/03/21/Collecting-Docker-Logs-With-Loki/grafana-loki.png"></a></p><p>You can also filter by words using the logql syntax, for example: <code>|=</code> includes syntax or <code>!=</code> excludes syntax. You can find out more about Loki logql syntax <a href="https://github.com/grafana/loki/blob/master/docs/logql.md">here</a>.</p><h3 id="Closing-Notes"><a href="#Closing-Notes" class="headerlink" title="Closing Notes"></a><a href="#Closing-Notes" title="Closing Notes"></a>Closing Notes</h3><p>We saw how to define a Loki docker container, afterwards we added Loki logging driver as a docker plugin, and finally, we shipped all of our logs to Grafana with a simple configuration.<br><a href="https://yuriktech.com/2020/03/21/Collecting-Docker-Logs-With-Loki/">https://yuriktech.com/2020/03/21/Collecting-Docker-Logs-With-Loki/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 配置根据请求IP末段进行分流 - SegmentFault 思否</title>
      <link href="/2021/02/01/nginx-pei-zhi-gen-ju-qing-qiu-ip-mo-duan-jin-xing-fen-liu-segmentfault-si-fou/"/>
      <url>/2021/02/01/nginx-pei-zhi-gen-ju-qing-qiu-ip-mo-duan-jin-xing-fen-liu-segmentfault-si-fou/</url>
      
        <content type="html"><![CDATA[<p>原文链接： <a href="http://hxd.life/2019/05/13/Nginx%E9%85%8D%E7%BD%AE%E6%A0%B9%E6%8D%AE%E8%AF%B7%E6%B1%82IP%E6%9C%AB%E6%AE%B5%E5%88%86%E6%B5%81/">何晓东 博客</a></p><pre><code> upstream jlovec.com {  server 192.168.1.100:8080;}upstream jlovec-default.com {  server 192.168.1.200:8080;}server {  listen 80;  server_name www.jlovec.com;  location /  {   if ( $remote_addr ~* ^10\.0\.(.*)\.[1,10]$) {        proxy_pass http://jlovec.com;        break;    }    proxy_pass http://jlovec-default.com;  }}</code></pre><p>以上为将 IP 末段为 1-125 的请求来源转发到 huaji-01.com，其他转向 huaji-02.com，同样可以修改正则，例如</p><p>规则： <code>$remote_addr ~* ^(.*)\.(.*)\.(.*)\.*[0268]$</code> 末尾为 0268 这样的偶数 ip，跳转到 huaji-01.com，其他跳转到第二个域名；</p><p>规则：<code>$remote_addr ~* ^(112)\.(.*)\.(.*)\.(.*)$</code> 开头为 112 的 IP 跳转到指定的域名；</p><p>规则：<code>$http_x_forwarded_for ~* ^(112)\.(.*)\.(.*)\.(.*)$</code> 根据 forward 地址段来分流，开头为 112 的跳转到指定域名</p><p>if 指令条件判断的含义：</p><blockquote><p><strong>正则表达式匹配，其中：</strong></p></blockquote><blockquote><p>~ 为区分大小写匹配</p></blockquote><blockquote><p>~* 为不区分大小写匹配</p></blockquote><blockquote><p>!~ 和 !~* 分别为区分大小写不匹配及不区分大小写不匹配</p></blockquote><blockquote><p><strong>文件及目录匹配，其中：</strong></p></blockquote><blockquote><p>-f 和 !-f 用来判断是否存在文件</p></blockquote><blockquote><p>-d 和 !-d 用来判断是否存在目录</p></blockquote><blockquote><p>-e 和 !-e 用来判断是否存在文件或目录</p></blockquote><blockquote><p>-x 和 !-x 用来判断文件是否可执行</p></blockquote><blockquote><p><strong>rewrite 指令的最后一项参数为 flag 标记，flag 标记有：</strong></p></blockquote><blockquote><p>last 相当于 apache 里面的 [L] 标记，表示 rewrite。</p></blockquote><blockquote><p>break 本条规则匹配完成后，终止匹配，不再匹配后面的规则。</p></blockquote><blockquote><p>redirect 返回 302 临时重定向，浏览器地址会显示跳转后的 URL 地址。</p></blockquote><blockquote><p>permanent 返回 301 永久重定向，浏览器地址会显示跳转后的 URL 地址。</p></blockquote><p>参考链接：</p><ol><li><p> <a href="https://github.com/DocsHome/nginx-docs">Nginx 中文文档</a></p></li><li><p> <a href="https://github.com/DocsHome/nginx-docs/blob/d1d7dfc7e4c1f189d4b41621cea9017b9be430e4/%E6%A8%A1%E5%9D%97%E5%8F%82%E8%80%83/http/ngx_http_rewrite_module.md">Nginx rewrite 模块文档</a></p></li></ol><p><a href="https://segmentfault.com/a/1190000019707041">https://segmentfault.com/a/1190000019707041</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 安装 python 3.6、 3.7</title>
      <link href="/2021/01/07/ubuntu-an-zhuang-python-3.6-3.7/"/>
      <url>/2021/01/07/ubuntu-an-zhuang-python-3.6-3.7/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu-安装-python-3-6-3-7"><a href="#Ubuntu-安装-python-3-6-3-7" class="headerlink" title="Ubuntu 安装 python 3.6 3.7"></a>Ubuntu 安装 python 3.6 3.7</h1><h2 id="Step-1-Install-ppa"><a href="#Step-1-Install-ppa" class="headerlink" title="Step 1:- Install ppa"></a>Step 1:- Install ppa</h2><p>This PPA contains more recent Python versions packaged for Ubuntu. Install ppa by running the following command.</p><pre><code>$ sudo add-apt-repository ppa:deadsnakes/ppa</code></pre><h2 id="Step-2-Update-packeges"><a href="#Step-2-Update-packeges" class="headerlink" title="Step 2:- Update packeges"></a>Step 2:- Update packeges</h2><p>Now, update your packages by running the following command.</p><pre><code>$ sudo apt-get update</code></pre><h2 id="Step-3-Upgrade-python-2-x-to-python-3-x"><a href="#Step-3-Upgrade-python-2-x-to-python-3-x" class="headerlink" title="Step 3:- Upgrade python 2.x to python 3.x"></a>Step 3:- Upgrade python 2.x to python 3.x</h2><p>Before install 3.7, we should have to install python 3.6 by running the following command.</p><pre><code>$ sudo apt-get install python3.6$ sudo apt-get install python3.7</code></pre><h2 id="PiP-installation"><a href="#PiP-installation" class="headerlink" title="PiP installation"></a>PiP installation</h2><p>Install pip by running the following command.</p><pre><code>$ sudo apt install python3-pip</code></pre><h2 id="Set-priority"><a href="#Set-priority" class="headerlink" title="Set priority"></a>Set priority</h2><pre><code>$ sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1$ sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2</code></pre><p>Now, you can use python 2.7, 3.6 and 3.7 in your machine.</p><p><a href="https://rajputankit22.medium.com/upgrade-python-2-7-to-3-6-and-3-7-in-ubuntu-97d2727bf911">https://rajputankit22.medium.com/upgrade-python-2-7-to-3-6-and-3-7-in-ubuntu-97d2727bf911</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Alfred工作流workflows实例</title>
      <link href="/2020/12/26/alfred-gong-zuo-liu-workflows-shi-li/"/>
      <url>/2020/12/26/alfred-gong-zuo-liu-workflows-shi-li/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.hhtjim.com/tag/alfred">Alfred</a>是<a href="https://www.hhtjim.com/tag/mac">mac</a>上强大的快速启动工具 可以自定义 php/shell/ruby/python 脚本执行任意操作。比如快速搜索关键字打开网页 查询字符转码 ip。。。这些都是可以自己定义操作的，只是需要一些脚本语言编写的知识。</p><blockquote><p>windows 上有类型的 Wox <a href="https://github.com/Wox-launcher/Wox">https://github.com/Wox-launcher/Wox</a></p></blockquote><h3 id="下载-Alfred"><a href="#下载-Alfred" class="headerlink" title="下载 Alfred"></a>下载 Alfred</h3><p>官网： <a href="https://www.%5BAlfred%5D(https://www.hhtjim.com/tag/alfred)" title="View all posts in Alfred">https://www.[Alfred](https://www.hhtjim.com/tag/alfred</a>app.com/</p><p>工作流 workflows 自定义脚本的功能在 Alfred 中是收费的功能, 还好 有可用的版本</p><p>n<a href="https://www.hhtjim.com/tag/mac">mac</a>.to cracked：<a href="https://userscloud.com/o3ibe2w7071h/nmac.to_alf37931b.zip">https://userscloud.com/o3ibe2w7071h/nmac.to_alf37931b.zip</a></p><h3 id="添加-配置-workflows"><a href="#添加-配置-workflows" class="headerlink" title="添加 / 配置 workflows"></a>添加 / 配置 workflows</h3><blockquote><p>点击<code>Workflows</code>切换到工作流选项</p></blockquote><blockquote><p>窗口左下角 「 help + -」，点击 <code>+</code>-&gt;<code>Blank Workflow</code> 开始新建工作流程</p></blockquote><p>填写名称<code>name</code>，描述<code>Description</code>,<code>Bundle id</code>为自己标记的包名 id 要确保唯一性。</p><p><img src="https://static.hhtjim.com/wp-content/uploads/2018/09/1536307820.png#alt="></p><blockquote><p>右边黑色背景窗口中右键 <code>inputs</code>-&gt;<code>Script Filter</code> 添加自定义执行的脚本</p></blockquote><p>[<img src="https://static.hhtjim.com/wp-content/uploads/2018/09/1536307676471-300x221.jpg#alt="></p><p>](<a href="https://static.hhtjim.com/wp-content/uploads/2018/09/1536307676471.jpg">https://static.hhtjim.com/wp-content/uploads/2018/09/1536307676471.jpg</a>)</p><blockquote><p>配置执行脚本以及触发的关键字</p></blockquote><p><code>keyword</code>为触发的关键字 比如 alfred 启动框框中输入<code>baidu 空格 query</code>,<code>baidu</code>就是触发脚本的自定义关键字，空格后面的 query 即为查询的参数<code>下面的</code>Language`即为脚本语言 这里用的系统自带的权限脚本。</p><p>[<img src="https://static.hhtjim.com/wp-content/uploads/2018/09/1536308188-300x243.png#alt="></p><p>](<a href="https://static.hhtjim.com/wp-content/uploads/2018/09/1536308188.png">https://static.hhtjim.com/wp-content/uploads/2018/09/1536308188.png</a>)</p><pre><code>#!/bin/baship=$(ifconfig en0 | grep 'inet .*'  | sed 's/^.*inet//g' | sed 's/ netmask.*//g')cat &lt;&lt; EOF{"items": [    {        "title": "${ip}",        "subtitle": "局域网en0 ip",        "arg": "${ip}"    }]}EOF</code></pre><p>说明：</p><p>使用系统 bash 查询<code>ifconfig</code>命令 en0 网卡的 IP 信息 管道命令符<code>|</code>继续处理<code>sed</code>截取输出结果。</p><p>最后使用<code>cat</code>输出 json 数据用于 Alfred 读取并显示到结果列表</p><p>items 具体参数释义参考下方 alfredapp.com 链接。</p><p>这里<code>arg</code>是用于复制粘贴 / 通知等操作的 Alfred 变量赋值，否则会没反应。如果只是显示查看 可以只设置<code>title</code>，<code>subtitle</code> 效果就已经比较好了。</p><blockquote><p>点击<code>save</code>保存</p></blockquote><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>窗口右边有蜘蛛「<img src="https://twemoji.maxcdn.com/svg/1f577.svg#alt="></p><p>」图标 下方的<code>Log</code>下拉框 选择 <code>all information</code>便于查看调试信息</p><p><img src="https://static.hhtjim.com/wp-content/uploads/2018/09/1536311428.png#alt="></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p><code>option</code>+<code>space</code>启动 输入触发关键字</p><p><img src="https://static.hhtjim.com/wp-content/uploads/2018/09/1536310574.png#alt="></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>上面只是操作记录 这里可以直接下载：<a href="https://www.hhtjim.com/wp-content/uploads/2018/09/local-ip.alfredworkflow.zip">local ip.alfredworkflow</a></p><p>解压缩 直接打开 alfredworkflow 文件 import 导入</p><blockquote><p>参考：<a href="https://www.hhtjim.com/alfred-workflow-instances-workflows-query-local-ip.html">https://www.hhtjim.com/alfred-workflow-instances-workflows-query-local-ip.html</a></p></blockquote><p><a href="https://www.hhtjim.com/alfred-workflow-instances-workflows-query-local-ip.html">https://www.hhtjim.com/alfred-workflow-instances-workflows-query-local-ip.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux 大文件排序、去重</title>
      <link href="/2020/12/25/linux-da-wen-jian-pai-xu-qu-chong/"/>
      <url>/2020/12/25/linux-da-wen-jian-pai-xu-qu-chong/</url>
      
        <content type="html"><![CDATA[<ul><li>编写 shell 脚本 <code>vim sort_bigfile.sh</code></li></ul><pre><code>#!/bin/bashlines=$(wc -l $1 | sed 's/ .*//g')let lines_per_file=lines/$3split -d -l $lines_per_file $1 part$1for file in part*do{sort file}donewaitsort -smu sort_* &gt; $2rm -f partrm -f sort_</code></pre><p>_</p><ul><li>执行 shell, 目标大文件 bigfile.txt，最终生成的文件 final.txt，切割文件分数 30<br><code>bash sort_bigfile.sh bigfile.txt final.txt 30</code></li></ul><blockquote><p>参考文档：<a href="https://www.jianshu.com/p/62bbb72d6bcf">https://www.jianshu.com/p/62bbb72d6bcf</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>terrafrom 根据变量判断是否创建资源</title>
      <link href="/2020/12/08/terrafrom-gen-ju-bian-liang-pan-duan-shi-fou-chuang-jian-zi-yuan/"/>
      <url>/2020/12/08/terrafrom-gen-ju-bian-liang-pan-duan-shi-fou-chuang-jian-zi-yuan/</url>
      
        <content type="html"><![CDATA[<p>下面的配置中，若 var.target_group_addition&nbsp; 为 true ，则创建 aws_lb_target_group，若 var.target_group_addition&nbsp; 为 false ，则不创建。</p><pre class=" language-bash"><code class="language-bash">resource <span class="token string">"aws_lb_target_group"</span> <span class="token string">"tg"</span> <span class="token punctuation">{</span>  count <span class="token operator">=</span> var.target_group_addition ? 1 <span class="token keyword">:</span> 0  name                 <span class="token operator">=</span> <span class="token string">"tg-<span class="token variable">${var.name}</span>"</span>  port                 <span class="token operator">=</span> var.tg_port  protocol             <span class="token operator">=</span> var.tg_protocol  vpc_id               <span class="token operator">=</span> var.vpc_id  deregistration_delay <span class="token operator">=</span> var.tg_deregistration_delay  health_check <span class="token punctuation">{</span>    interval            <span class="token operator">=</span> var.tg_healthcheck_interval    path                <span class="token operator">=</span> var.tg_healthcheck_path    port                <span class="token operator">=</span> <span class="token string">"traffic-port"</span>    protocol            <span class="token operator">=</span> var.tg_protocol    <span class="token function">timeout</span>             <span class="token operator">=</span> 5    healthy_threshold   <span class="token operator">=</span> 2    unhealthy_threshold <span class="token operator">=</span> 2    matcher             <span class="token operator">=</span> var.tg_healthcheck_success_code  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> terrafrom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> terrafrom </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全国 DNS</title>
      <link href="/2020/12/08/quan-guo-dns/"/>
      <url>/2020/12/08/quan-guo-dns/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://ip.cn/dns.html">ip.cn</a></p><table><thead><tr><th>名称</th><th>DNS 服务器 IP 地址</th><th></th></tr></thead><tbody><tr><td>114 DNS</td><td>114.114.114.114</td><td>114.114.115.115</td></tr><tr><td>阿里 AliDNS</td><td>223.5.5.5</td><td>223.6.6.6</td></tr><tr><td>百度 BaiduDNS</td><td>180.76.76.76</td><td></td></tr><tr><td>DNSPod DNS+</td><td>119.29.29.29</td><td>119.29.29.29</td></tr><tr><td>CNNIC SDNS</td><td>1.2.4.8</td><td>210.2.4.8</td></tr><tr><td>oneDNS</td><td>117.50.11.11</td><td>52.80.66.66</td></tr></tbody></table><table><thead><tr><th>名称</th><th>DNS 服务器 IP 地址</th><th></th><th></th></tr></thead><tbody><tr><td>电信 / 移动 / 铁通</td><td></td><td>101.226.4.6</td><td>218.30.118.6</td></tr><tr><td>DNS 派 联通</td><td>123.125.81.6</td><td>140.207.198.6</td><td></td></tr><tr><td>Google DNS</td><td>8.8.8.8</td><td>8.8.4.4</td><td></td></tr><tr><td>IBM Quad9</td><td>9.9.9.9</td><td></td><td></td></tr><tr><td>OpenDNS</td><td>208.67.222.222</td><td>208.67.220.220</td><td></td></tr><tr><td>V2EX DNS</td><td>199.91.73.222</td><td>178.79.131.110</td><td></td></tr></tbody></table><table><thead><tr><th>名称</th><th>DNS 服务器 IP 地址</th><th></th></tr></thead><tbody><tr><td>安徽电信 DNS</td><td>61.132.163.68</td><td>202.102.213.68</td></tr><tr><td>北京电信 DNS</td><td>219.141.136.10</td><td>219.141.140.10</td></tr><tr><td>重庆电信 DNS</td><td>61.128.192.68</td><td>61.128.128.68</td></tr><tr><td>福建电信 DNS</td><td>218.85.152.99</td><td>218.85.157.99</td></tr><tr><td>甘肃电信 DNS</td><td>202.100.64.68</td><td>61.178.0.93</td></tr><tr><td>广东电信 DNS</td><td>202.96.128.86</td><td>202.96.128.166</td></tr><tr><td>202.96.134.33</td><td>202.96.128.68</td><td></td></tr><tr><td>广西电信 DNS</td><td>202.103.225.68</td><td>202.103.224.68</td></tr><tr><td>贵州电信 DNS</td><td>202.98.192.67</td><td>202.98.198.167</td></tr><tr><td>河南电信 DNS</td><td>222.88.88.88</td><td>222.85.85.85</td></tr><tr><td>黑龙江电信</td><td>219.147.198.230</td><td>219.147.198.242</td></tr><tr><td>湖北电信 DNS</td><td>202.103.24.68</td><td>202.103.0.68</td></tr><tr><td>湖南电信 DNS</td><td>222.246.129.80</td><td>59.51.78.211</td></tr><tr><td>江苏电信 DNS</td><td>218.2.2.2</td><td>218.4.4.4</td></tr><tr><td>61.147.37.1</td><td>218.2.135.1</td><td></td></tr><tr><td>江西电信 DNS</td><td>202.101.224.69</td><td>202.101.226.68</td></tr><tr><td>内蒙古电信</td><td>219.148.162.31</td><td>222.74.39.50</td></tr><tr><td>山东电信 DNS</td><td>219.146.1.66</td><td>219.147.1.66</td></tr><tr><td>陕西电信 DNS</td><td>218.30.19.40</td><td>61.134.1.4</td></tr><tr><td>上海电信 DNS</td><td>202.96.209.133</td><td>116.228.111.118</td></tr><tr><td>202.96.209.5</td><td>180.168.255.118</td><td></td></tr><tr><td>四川电信 DNS</td><td>61.139.2.69</td><td>218.6.200.139</td></tr><tr><td>天津电信 DNS</td><td>219.150.32.132</td><td>219.146.0.132</td></tr><tr><td>云南电信 DNS</td><td>222.172.200.68</td><td>61.166.150.123</td></tr><tr><td>浙江电信 DNS</td><td>202.101.172.35</td><td>61.153.177.196</td></tr><tr><td>61.153.81.75</td><td>60.191.244.5</td><td></td></tr></tbody></table><table><thead><tr><th>名称</th><th>DNS 服务器 IP 地址</th><th></th></tr></thead><tbody><tr><td>北京联通 DNS</td><td>123.123.123.123</td><td>123.123.123.124</td></tr><tr><td>202.106.0.20</td><td>202.106.195.68</td><td></td></tr><tr><td>重庆联通 DNS</td><td>221.5.203.98</td><td>221.7.92.98</td></tr><tr><td>广东联通 DNS</td><td>210.21.196.6</td><td>221.5.88.88</td></tr><tr><td>河北联通 DNS</td><td>202.99.160.68</td><td>202.99.166.4</td></tr><tr><td>河南联通 DNS</td><td>202.102.224.68</td><td>202.102.227.68</td></tr><tr><td>黑龙江联通</td><td>202.97.224.69</td><td>202.97.224.68</td></tr><tr><td>吉林联通 DNS</td><td>202.98.0.68</td><td>202.98.5.68</td></tr><tr><td>江苏联通 DNS</td><td>221.6.4.66</td><td>221.6.4.67</td></tr><tr><td>内蒙古联通</td><td>202.99.224.68</td><td>202.99.224.8</td></tr><tr><td>山东联通 DNS</td><td>202.102.128.68</td><td>202.102.152.3</td></tr><tr><td>202.102.134.68</td><td>202.102.154.3</td><td></td></tr><tr><td>山西联通 DNS</td><td>202.99.192.66</td><td>202.99.192.68</td></tr><tr><td>陕西联通 DNS</td><td>221.11.1.67</td><td>221.11.1.68</td></tr><tr><td>上海联通 DNS</td><td>210.22.70.3</td><td>210.22.84.3</td></tr><tr><td>四川联通 DNS</td><td>119.6.6.6</td><td>124.161.87.155</td></tr><tr><td>天津联通 DNS</td><td>202.99.104.68</td><td>202.99.96.68</td></tr><tr><td>浙江联通 DNS</td><td>221.12.1.227</td><td>221.12.33.227</td></tr><tr><td>辽宁联通 DNS</td><td>202.96.69.38</td><td>202.96.64.68</td></tr></tbody></table><table><thead><tr><th>名称</th><th>DNS 服务器 IP 地址</th><th></th></tr></thead><tbody><tr><td>江苏移动 DNS</td><td>221.131.143.69</td><td>112.4.0.55</td></tr><tr><td>安徽移动 DNS</td><td>211.138.180.2</td><td>211.138.180.3</td></tr><tr><td>山东移动 DNS</td><td>218.201.96.130</td><td>211.137.191.26</td></tr></tbody></table><p><a href="https://ip.cn/dns.html">https://ip.cn/dns.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 指定 dns 测试 dns server 解析情况</title>
      <link href="/2020/12/08/go-zhi-ding-dns-ce-shi-dns-server-jie-xi-qing-kuang/"/>
      <url>/2020/12/08/go-zhi-ding-dns-ce-shi-dns-server-jie-xi-qing-kuang/</url>
      
        <content type="html"><![CDATA[<pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"log"</span>    <span class="token string">"github.com/bogdanovich/dns_resolver"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    resolver <span class="token operator">:=</span> dns_resolver<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"8.8.8.8"</span><span class="token punctuation">,</span> <span class="token string">"8.8.4.4"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// OR</span>    <span class="token comment" spellcheck="true">// resolver := dns_resolver.NewFromResolvConf("resolv.conf")</span>    <span class="token comment" spellcheck="true">// In case of i/o timeout</span>    resolver<span class="token punctuation">.</span>RetryTimes <span class="token operator">=</span> <span class="token number">5</span>    ip<span class="token punctuation">,</span> err <span class="token operator">:=</span> resolver<span class="token punctuation">.</span><span class="token function">LookupHost</span><span class="token punctuation">(</span><span class="token string">"google.com"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Output [216.58.192.46]</span><span class="token punctuation">}</span></code></pre><p><a href="https://github.com/bogdanovich/dns_resolver">https://github.com/bogdanovich/dns_resolver</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dns </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 之 proxy_pass详解</title>
      <link href="/2020/12/08/nginx-zhi-proxy-pass-xiang-jie/"/>
      <url>/2020/12/08/nginx-zhi-proxy-pass-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>在 nginx 中配置 proxy_pass 代理转发时，如果在 proxy_pass 后面的 url 加 /，表示绝对根路径；如果没有 /，表示相对路径，把匹配的路径部分也给代理走。</p><p>假设下面四种情况分别用 <a href="http://192.168.1.1/proxy/test.html">http://192.168.1.1/proxy/test.html</a> 进行访问。</p><p>第一种：</p><pre><code>location /proxy/ {    proxy_pass http://127.0.0.1/;}</code></pre><p>代理到 URL：<a href="http://127.0.0.1/test.html">http://127.0.0.1/test.html</a></p><p>第二种（相对于第一种，最后少一个 / ）</p><pre><code>location /proxy/ {    proxy_pass http://127.0.0.1;}</code></pre><p>代理到 URL：<a href="http://127.0.0.1/proxy/test.html">http://127.0.0.1/proxy/test.html</a></p><p>第三种：</p><pre><code>location /proxy/ {   proxy_pass [http://127.0.0.1/aaa/](http://127.0.0.1/aaa/);}</code></pre><p>代理到 URL：<a href="http://127.0.0.1/aaa/test.html">http://127.0.0.1/aaa/test.html</a></p><p>第四种（相对于第三种，最后少一个 / ）</p><pre><code>location /proxy/ {    proxy_pass [http://127.0.0.1/aaa](http://127.0.0.1/aaa);}</code></pre><p>代理到 URL：<a href="http://127.0.0.1/aaatest.html">http://127.0.0.1/aaatest.html</a></p><p>nginx 中有两个模块都有<code>proxy_pass</code>指令。</p><ul><li><code>ngx_http_proxy_module</code>的<code>proxy_pass</code>：<br>语法: proxy_pass URL;场景: location, if in location, limit_except 说明: 设置后端代理服务器的协议(protocol)和地址(address),以及 location 中可以匹配的一个可选的 URI。协议可以是”http”或”https”。地址可以是一个域名或 ip 地址和端口，或者一个 unix-domain socket 路径。 &nbsp; 详见官方文档: <a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_passURI%E7%9A%84%E5%8C%B9%E9%85%8D%EF%BC%8C%E6%9C%AC%E6%96%87%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86%E9%87%8D%E7%82%B9%E8%AE%A8%E8%AE%BA%E3%80%82">http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_passURI的匹配，本文第四部分重点讨论。</a></li><li><code>ngx_stream_proxy_module</code>的<code>proxy_pass</code>：<br>语法: proxy_pass address;场景: server 说明: 设置后端代理服务器的地址。这个地址(address)可以是一个域名或 ip 地址和端口，或者一个 unix-domain socket 路径。 &nbsp; 详见官方文档: <a href="http://nginx.org/en/docs/stream/ngx_stream_proxy_module.html#proxy_pass">http://nginx.org/en/docs/stream/ngx_stream_proxy_module.html#proxy_pass</a></li></ul><h2 id="二、两个proxy-pass的关系和区别"><a href="#二、两个proxy-pass的关系和区别" class="headerlink" title="二、两个proxy_pass的关系和区别"></a>二、两个<code>proxy_pass</code>的关系和区别</h2><p>在两个模块中，两个<code>proxy_pass</code>都是用来做后端代理的指令。<br><code>ngx_stream_proxy_module</code>模块的<code>proxy_pass</code>指令只能在 server 段使用使用, 只需要提供域名或 ip 地址和端口。可以理解为端口转发，可以是 tcp 端口，也可以是 udp 端口。<br><code>ngx_http_proxy_module</code>模块的<code>proxy_pass</code>指令需要在 location 段，location 中的 if 段，limit_except 段中使用，处理需要提供域名或 ip 地址和端口外，还需要提供协议，如 “http” 或 “https”，还有一个可选的 uri 可以配置。</p><h2 id="三、proxy-pass-的具体用法"><a href="#三、proxy-pass-的具体用法" class="headerlink" title="三、proxy_pass 的具体用法"></a>三、proxy_pass 的具体用法</h2><h3 id="ngx-stream-proxy-module模块的proxy-pass指令"><a href="#ngx-stream-proxy-module模块的proxy-pass指令" class="headerlink" title="ngx_stream_proxy_module模块的proxy_pass指令"></a><code>ngx_stream_proxy_module</code>模块的<code>proxy_pass</code>指令</h3><pre><code>server {    listen 127.0.0.1:12345;    proxy_pass 127.0.0.1:8080;}server {    listen 12345;    proxy_connect_timeout 1s;    proxy_timeout 1m;    proxy_pass example.com:12345;}server {    listen 53 udp;    proxy_responses 1;    proxy_timeout 20s;    proxy_pass dns.example.com:53;}server {    listen [::1]:12345;    proxy_pass unix:/tmp/stream.socket;}</code></pre><h3 id="ngx-http-proxy-module模块的proxy-pass指令"><a href="#ngx-http-proxy-module模块的proxy-pass指令" class="headerlink" title="ngx_http_proxy_module模块的proxy_pass指令"></a><code>ngx_http_proxy_module</code>模块的<code>proxy_pass</code>指令</h3><pre><code>server {    listen      80;    server_name www.test.com;    location /some/path/ {        proxy_pass http:    }    location /testb {        proxy_pass http:    }    location /google {        if ( $geoip_country_code ~ (RU|CN) ) {            proxy_pass http:        }    }    location /yongfu/ {        proxy_pass http:        limit_except PUT DELETE {            proxy_pass http:        }    }}</code></pre><h2 id="四、proxy-pass后，后端服务器的url-request-uri-情况分析"><a href="#四、proxy-pass后，后端服务器的url-request-uri-情况分析" class="headerlink" title="四、proxy_pass后，后端服务器的url(request_uri) 情况分析"></a>四、<code>proxy_pass</code>后，后端服务器的<code>url</code>(<code>request_uri</code>) 情况分析</h2><pre><code>server {    listen      80;    server_name www.test.com;    # 情形A    # 访问 http://www.test.com/testa/aaaa    # 后端的request_uri为: /testa/aaaa    location ^~ /testa/ {        proxy_pass http://127.0.0.1:8801;    }    # 情形B    # 访问 http://www.test.com/testb/bbbb    # 后端的request_uri为: /bbbb    location ^~ /testb/ {        proxy_pass http://127.0.0.1:8801/;    }    # 情形C    # 下面这段location是正确的    location ~ /testc {        proxy_pass http://127.0.0.1:8801;    }    # 情形D    # 下面这段location是错误的    #    # nginx -t 时，会报如下错误:    #    # nginx: [emerg] "proxy_pass" cannot have URI part in location given by regular    # expression, or inside named location, or inside "if" statement, or inside    # "limit_except" block in /opt/app/nginx/conf/vhost/test.conf:17    #    # 当location为正则表达式时，proxy_pass 不能包含URI部分。本例中包含了"/"    location ~ /testd {        proxy_pass http://127.0.0.1:8801/;   # 记住，location为正则表达式时，不能这样写！！！    }    # 情形E    # 访问 http://www.test.com/ccc/bbbb    # 后端的request_uri为: /aaa/ccc/bbbb    location /ccc/ {        proxy_pass http://127.0.0.1:8801/aaa$request_uri;    }    # 情形F    # 访问 http://www.test.com/namea/ddd    # 后端的request_uri为: /yongfu?namea=ddd    location /namea/ {        rewrite    /namea/([^/]+) /yongfu?namea=$1 break;        proxy_pass http://127.0.0.1:8801;    }    # 情形G    # 访问 http://www.test.com/nameb/eee    # 后端的request_uri为: /yongfu?nameb=eee    location /nameb/ {        rewrite    /nameb/([^/]+) /yongfu?nameb=$1 break;        proxy_pass http://127.0.0.1:8801/;    }    access_log /data/logs/www/www.test.com.log;}server {    listen      8801;    server_name www.test.com;    root        /data/www/test;    index       index.php index.html;    rewrite ^(.*)$ /test.php?u=$1 last;    location ~ \.php$ {        try_files $uri =404;        fastcgi_pass unix:/tmp/php-cgi.sock;        fastcgi_index index.php;        include fastcgi.conf;    }    access_log /data/logs/www/www.test.com.8801.log;}</code></pre><p>文件: <code>/data/www/test/test.php</code></p><pre><code>&lt;?phpecho '$_SERVER[REQUEST_URI]:' . $_SERVER['REQUEST_URI'];</code></pre><p>通过查看 $_SERVER[‘REQUEST_URI’] 的值，我们可以看到每次请求的后端的 request_uri 的值，进行验证。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>情形 A 和情形 B 进行对比，可以知道<code>proxy_pass</code>后带一个 URI, 可以是斜杠 (/) 也可以是其他 uri，对后端<code>request_uri</code>变量的影响。<br>情形 D 说明，当 location 为正则表达式时，<code>proxy_pass</code>不能包含 URI 部分。<br>情形 E 通过变量 ($request_uri, 也可以是其他变量)，对后端的<code>request_uri</code>进行改写。<br>情形 F 和情形 G 通过 rewrite 配合 break 标志, 对 url 进行改写，并改写后端的<code>request_uri</code>。需要注意，<code>proxy_pass</code>地址的 URI 部分在情形 G 中无效，不管如何设置，都会被忽略。</p><p>参考：<a href="https://www.jianshu.com/p/b010c9302cd0">https://www.jianshu.com/p/b010c9302cd0</a><br><a href="https://www.jianshu.com/p/b010c9302cd0">https://www.jianshu.com/p/b010c9302cd0</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五分钟了解LogQL</title>
      <link href="/2020/11/26/wu-fen-zhong-liao-jie-logql/"/>
      <url>/2020/11/26/wu-fen-zhong-liao-jie-logql/</url>
      
        <content type="html"><![CDATA[<p>受 PromQL 的启发，Loki 也有自己的 LogQL 查询语句。根据官方的说法，它就像一个<code>分布式的 grep 日志聚合查看器</code>。和 PromeQL 一样，LogQL 也是使用标签和运算符进行过滤，它主要分为两个部分：</p><ul><li>log stream selector （日志流选择器）</li><li>filter expression （过滤器表达式）</li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9ceca16a2844e63bb39298f06076abf~tplv-k3u1fbpfcp-watermark.image#align=left&amp;display=inline&amp;height=211&amp;margin=%5Bobject%20Object%5D&amp;originHeight=211&amp;originWidth=908&amp;status=done&amp;style=none&amp;width=908"><br>我们用这两部分就可以在 Loki 中组合出我们想要的功能，通常情况下我们可以拿来做如下功能</p><ul><li>根据日志流选择器查看日志内容</li><li>通过过滤规则在日志流中计算相关的度量指标</li></ul><h4 id="log-stream-selector"><a href="#log-stream-selector" class="headerlink" title="log stream selector"></a>log stream selector</h4><p>日志流选择器这部分和 PromQL 的语法一样，主要也是通过采集上来的日志 label 来确定你要查询的日志流。通常 label 的匹配运算支持以下几种：</p><ul><li>=: 完全匹配</li><li>!=: 不匹配</li><li>=~: 正则表达式匹配</li><li>!~: 正则表达式不匹配</li></ul><p>举个例子</p><pre><code>{name=~"mysql.+", env="prod"}{name!~"mysql.+", env="prod"}{name!~`mysql-\d+`,env="prod"}复制代码</code></pre><p>以上语句都可以查出所有与之匹配的日志内容</p><h4 id="filter-expression"><a href="#filter-expression" class="headerlink" title="filter expression"></a>filter expression</h4><p>在查看全文的日志时，通常会用<code>grep</code>等一些工具来查找我们关心的日志内容。LogQL 的表达式就是干这个的。当前，过滤的表达式主要支持如下 4 种：</p><ul><li>|=：日志行包含的字符串</li><li>!=：日志行不包含的字符串</li><li>|~：日志行匹配正则表达式</li><li>!~：日志行与正则表达式不匹配</li></ul><p>举个例子</p><pre><code>{job="mysql"} |= "error"{name="kafka"} |~ "tsdb-ops.*io:2003"{name="cassandra"} |~  `error=\w+`{instance=~"kafka-[23]",name="kafka"} != "kafka.server:type=ReplicaManager"复制代码</code></pre><p>如果要进行多次匹配的话，我们可以也可以像在 linux 用管道的方式追加规则：</p><pre><code>{job="mysql"} |= "error" != "timeout"复制代码</code></pre><h4 id="日志度量"><a href="#日志度量" class="headerlink" title="日志度量"></a>日志度量</h4><p>LogQL 同样支持通过函数方式将日志流进行度量，通常我们可以用它来计算消息的错误率或者排序一段时间内的应用日志输出 Top N。</p><h5 id="区间向量"><a href="#区间向量" class="headerlink" title="区间向量"></a>区间向量</h5><p>LogQL 同样也支持有限的<code>区间向量</code>度量语句，使用方式也和 PromQL 类似，常用函数主要是如下 4 个：</p><ul><li>rate: 计算每秒的日志条目</li><li>count_over_time: 对指定范围内的每个日志流的条目进行计数</li><li>bytes_rate: 计算日志流每秒的字节数</li><li>bytes_over_time: 对指定范围内的每个日志流的使用的字节数</li></ul><p>举个例子：</p><pre><code>#计算nginx的qpsrate({filename="/var/log/nginx/access.log"}[5m]))#计算kernel过去5分钟发生oom的次数count_over_time({filename="/var/log/message"} |~ "oom_kill_process" [5m]))复制代码</code></pre><h5 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h5><p>LogQL 也支持聚合运算，我们可用它来聚合单个向量内的元素，从而产生一个具有较少元素的新向量，当前支持的聚合函数如下：</p><ul><li>sum：求和</li><li>min：最小值</li><li>max：最大值</li><li>avg：平均值</li><li>stddev：标准差</li><li>stdvar：标准方差</li><li>count：计数</li><li>bottomk：最小的 k 个元素</li><li>topk：最大的 k 个元素</li></ul><p>聚合函数通常我们用如下表达式描述：</p><pre><code>&lt;aggr-op&gt;([parameter,] &lt;vector expression&gt;) [without|by (&lt;label list&gt;)]复制代码</code></pre><p>对于需要对标签进行分组时，我们可以用<code>without</code>或者<code>by</code>来区分，比如</p><pre><code>#计算nginx的qps，并按照pod_name来分组sum(rate({filename="/var/log/nginx/access.log"}[5m])) by (pod_name)复制代码</code></pre><p>只有在使用 bottomk 和 topk 函数时，我们可以对函数输入相关的参数，比如</p><pre><code>#计算nginx的qps最大的前5个，并按照pod_name来分组topk(5,sum(rate({filename="/var/log/nginx/access.log"}[5m])) by (pod_name))复制代码</code></pre><h5 id="数学计算"><a href="#数学计算" class="headerlink" title="数学计算"></a>数学计算</h5><p>有同学要问了，Loki 存的不是日志吗？都是文本，怎么计算啊？显然 LogQL 中的数学运算还是面向区间向量操作的。LogQL 中的支持的二进制运算符如下：</p><ul><li>+： 加法</li><li>-： 减法</li><li>*： 乘法</li><li>/： 除法</li><li>%： 求模</li><li>^： 求幂</li></ul><p>比如我们要找到某个业务日志里面的错误率，就可以按照如下方式计算：</p><pre><code>#计算日志内的错误率sum(rate({app="foo", level="error"}[1m])) / sum(rate({app="foo"}[1m]))复制代码</code></pre><h5 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h5><p>集合运算仅在区间向量范围内有效，当前支持</p><ul><li>and：并且</li><li>or：或者</li><li>unless：排除</li></ul><blockquote><p>小白当前还没找到 LogQL 里面集合运算的案例，暂且跳过</p></blockquote><h5 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h5><p>LogQL 支持的比较运算符合 PromQL 一样，均为以下内容：</p><ul><li><p>==： 等于</p></li><li><p>!=： 不等于</p></li><li><blockquote><p>： 大于</p></blockquote></li><li><blockquote><p>=: 大于或等于</p></blockquote></li><li><p>&lt;： 小于</p></li><li><p>&lt;=: 小于或等于</p></li></ul><p>通常我们使用区间向量计算后会做一个阈值的比较，这对应告警是非常有用的，比如：</p><pre><code># 统计5分钟内error级别日志条目大于10的情况count_over_time({app="foo", level="error"}[5m]) &gt; 10复制代码</code></pre><p>当然我们也可以通过布尔计算来表达，比如：</p><pre><code># 统计5分钟内error级别日志条目大于10为真，反正则为假count_over_time({app="foo", level="error"}[5m]) &gt; bool 10复制代码</code></pre><blockquote><p>这部分后面结合 Loki ruler 使用会有更多的使用场景，建议配合《Loki 告警的正确姿势》一起食用</p></blockquote><h5 id="运算优先级"><a href="#运算优先级" class="headerlink" title="运算优先级"></a>运算优先级</h5><p>LogQL 的运算优先级也保持了常规的数学操作顺序，即如下规则：</p><ol><li>^</li><li>*， /， %</li><li>+， -</li><li>==，!=， &lt;=， &lt;，&gt;=， &gt;</li><li>and， unless</li><li>or</li></ol><hr><p>体验更好的云原生日志查询系统？请关注我们的开源项目<a href="https://juejin.im/post/6887788337512316941">Dagger</a></p><hr><p><a href="https://juejin.cn/post/6885882888995209224">https://juejin.cn/post/6885882888995209224</a><br><a href="https://juejin.cn/post/6885882888995209224">https://juejin.cn/post/6885882888995209224</a></p>]]></content>
      
      
      <categories>
          
          <category> logging </category>
          
      </categories>
      
      
        <tags>
            
            <tag> logging </tag>
            
            <tag> logql </tag>
            
            <tag> loki </tag>
            
            <tag> grafana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建SVN</title>
      <link href="/2020/11/23/docker-da-jian-svn/"/>
      <url>/2020/11/23/docker-da-jian-svn/</url>
      
        <content type="html"><![CDATA[<h3 id="1-基础环境"><a href="#1-基础环境" class="headerlink" title="1. 基础环境"></a>1. 基础环境</h3><ul><li>Docker</li><li>docker-compose</li></ul><h3 id="2-开启简单的容器实例"><a href="#2-开启简单的容器实例" class="headerlink" title="2. 开启简单的容器实例"></a>2. 开启简单的容器实例</h3><p>创建 docker-compose.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># filename: docker-compose.yml</span><span class="token key atrule">svn</span><span class="token punctuation">:</span>  <span class="token key atrule">image</span><span class="token punctuation">:</span> elleflorio/svn<span class="token punctuation">-</span>server  <span class="token key atrule">container_name</span><span class="token punctuation">:</span> svn<span class="token punctuation">-</span>server  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"80:80"</span>    <span class="token punctuation">-</span> <span class="token string">"3690:3690"</span>  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ./svn/svn_repo/<span class="token punctuation">:</span>/home/svn/ <span class="token comment" spellcheck="true"># 挂载存放版本文件夹</span>    <span class="token punctuation">-</span> ./svn/svn_config/<span class="token punctuation">:</span>/etc/subversion/ <span class="token comment" spellcheck="true"># 挂载存放svn配置文件夹</span>    <span class="token punctuation">-</span> /etc/localtime<span class="token punctuation">:</span>/etc/localtime<span class="token punctuation">:</span>ro <span class="token comment" spellcheck="true"># 主机的时间同步到容器</span>  <span class="token key atrule">restart</span><span class="token punctuation">:</span> always</code></pre><p>启动使用下面的命令容器</p><pre class=" language-bash"><code class="language-bash">docker-compose up -d</code></pre><h3 id="3-在服务器创建代码仓库"><a href="#3-在服务器创建代码仓库" class="headerlink" title="3. 在服务器创建代码仓库"></a>3. 在服务器创建代码仓库</h3><pre><code># 创建代码仓库docker exec -t svn-server svnadmin create /home/svn/test</code></pre><p>以上代码中，在容器中的 / home/svn/test 目录创建代码仓库，会同步到本机的 / var/svn 目录。我们先进行 svn 仓库配置。</p><blockquote><p>SVN 库中的配置目录 conf 有三个文件:</p><ul><li>authz 是权限控制文件</li><li>passwd 是帐号密码文件</li><li>svnserve.conf 是 SVN 服务综合配置文件</li></ul></blockquote><p><strong>配置权限配置文件 authz</strong><br>编辑 authz ，内容参考如下：<br><em>示例代码：/var/svn/test/conf/authz</em></p><pre><code>[groups]#用户组admin = master,master#用户组所对应的目录[/]#库目录权限@admin = rw#用户组权限*=r</code></pre><p><strong>配置账号密码文件 passwd</strong><br>编辑 passwd ，内容参考如下：<br><em>示例代码：/var/svn/test/conf/passwd</em></p><pre><code>[users]# harry = harryssecret# sally = sallyssecretmaster = masteradmin = admin</code></pre><p><strong>配置 SVN 服务综合配置文件 svnserve.conf</strong><br>编辑 svnserve.conf ，内容参考如下：<br><em>示例代码：/var/svn/test/conf/svnserve.conf</em></p><pre><code>[general]# force-username-case = none# 匿名访问的权限 可以是read、write，none，默认为readanon-access = none#使授权用户有写权限auth-access = write#密码数据库的路径password-db = passwd#访问控制文件authz-db = authz#认证命名空间，SVN会在认证提示里显示，并且作为凭证缓存的关键字realm = /var/svn/test[sasl]</code></pre><p>完成以上配置之后，我们要做的是服务器代码与本地代码同步，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20191127221033440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzMwMjg2,size_16,color_FFFFFF,t_70#align=left&amp;display=inline&amp;height=523&amp;margin=%5Bobject%20Object%5D&amp;originHeight=523&amp;originWidth=1056&amp;status=done&amp;style=none&amp;width=1056"></p><p>下面，我们将本机电脑代码推送到 SVN 仓库后，服务器又将代码同步到项目目录。</p><h3 id="4-同步代码到服务器项目目录"><a href="#4-同步代码到服务器项目目录" class="headerlink" title="4. 同步代码到服务器项目目录"></a>4. 同步代码到服务器项目目录</h3><p><strong>(1) 在 PC 上将代码上传到 svn 仓库（PC 上必须安装 SVN）</strong></p><pre><code># 将仓库中的代码pull到本地,下面的123.123.123.123代表的是服务器IP地址，以下过程可能会需要输入svn账号和密码svn checkout svn://123.123.123.123/test# 进入代码目录cd test# 创建示例文件echo "hello" &gt;&gt; test.txt# 提交代码到SVN仓库svn add test.txtsvn commit test.txt -m 'test'</code></pre><p><strong>(2) 服务器同步代码</strong></p><pre><code># 将代码同步到项目目录docker exec -t svn-server svn checkout svn://127.0.0.1/test /var/www/html/test --username master --password master --force --no-auth-cache</code></pre><p><strong>(3) 自动同步代码</strong></p><p>实际上，如果我们用于开发的 PC 每一次向服务器提交一次代码，服务器都需要手动执行一下同步命令，本地代码才会同步到服务器的项目目录。想必很麻烦，于是我们可以使用 SVN 提供的钩子去实现代码自动更新。</p><pre><code># 进入钩子配置文件目录cd /var/svn/test/hooks# 复制钩子文件cp post-commit.tmpl post-commit</code></pre><p>我们将 post-commit.tmpl 钩子文件的后缀名去掉即可生效，于是我们复制一份。接下来我们编辑 post-commit 文件，注释掉发送邮件的代码。然后在下面加上两行代码即可，如下：</p><pre><code>REPOS="$1"REV="$2"TXN_NAME="$3"#mailer.py commit "$REPOS" "$REV" /path/to/mailer.conf# 设置编码export LANG="en_US.UTF-8"# 更新代码到项目目录svn update --username master --password master /var/www/html/test</code></pre><p>编辑完成配置文件之后，我们只需要保存即可，自动生效。此时在 PC 上修改项目内容，再次提交到代码仓库，服务器会自动同步到服务器的项目目录。不再需要手动执行 svn checkout 指令</p><hr><blockquote><p>参考文档：<br><a href="https://blog.csdn.net/qq_34330286/article/details/103284582">https://blog.csdn.net/qq_34330286/article/details/103284582</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 版本管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svn </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVN常用命令</title>
      <link href="/2020/11/23/svn-chang-yong-ming-ling/"/>
      <url>/2020/11/23/svn-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># checkout代码</span>svn co svn://svnbucket.com/xxx/xxx<span class="token comment" spellcheck="true"># 更新代码</span>svn up<span class="token comment" spellcheck="true"># 添加新文件到版本库</span>svn add filename<span class="token comment" spellcheck="true"># 添加当前目录下所有php文件</span>svn add *.php<span class="token comment" spellcheck="true"># 递归添加当前目录下的所有新文件</span>svn add <span class="token keyword">.</span> --no-ignore --force<span class="token comment" spellcheck="true"># 提交代码</span>svn commit -m <span class="token string">"提交描述"</span><span class="token comment" spellcheck="true"># 查看指定文件的所有log</span>svn log test.php<span class="token comment" spellcheck="true"># 查看指定版本号的log</span>svn log -r 100<span class="token comment" spellcheck="true"># 撤销本地文件的修改（还没提交的）</span>svn revert test.phpsvn revert -r 目录名<span class="token comment" spellcheck="true"># 撤销目录下所有本地修改</span>svn revert --recursive 目录名<span class="token comment" spellcheck="true"># 查看当前工作区的所有改动</span>svn <span class="token function">diff</span><span class="token comment" spellcheck="true"># 查看当前工作区test.php文件与最新版本的差异</span>svn <span class="token function">diff</span> test.php<span class="token comment" spellcheck="true"># 指定版本号比较差异</span>svn <span class="token function">diff</span> -r 200:201 test.php<span class="token comment" spellcheck="true"># 查看当前工作区和版本301中bin目录的差异</span>svn <span class="token function">diff</span> -r 301 bin<span class="token comment" spellcheck="true"># 查看当前工作区的状态</span>svn status<span class="token comment" spellcheck="true"># 查看svn信息</span>svn info<span class="token comment" spellcheck="true"># 查看文件列表，可以指定-r查看，查看指定版本号的文件列表</span>svn <span class="token function">ls</span>svn <span class="token function">ls</span> -r 100<span class="token comment" spellcheck="true"># 显示文件的每一行最后是谁修改的（出了BUG，经常用来查这段代码是谁改的）</span>svn blame filename.php<span class="token comment" spellcheck="true"># 查看指定版本的文件内容，不加版本号就是查看最新版本的</span>svn <span class="token function">cat</span> test.py -r 2<span class="token comment" spellcheck="true"># 清理</span>svn cleanup<span class="token comment" spellcheck="true"># 若想创建了一个文件夹，并且把它加入版本控制，但忽略文件夹中的所有文件的内容</span>$ svn <span class="token function">mkdir</span> spool$ svn propset svn:ignore <span class="token string">'*'</span> spool$ svn ci -m <span class="token string">'Adding "spool" and ignoring its contents.'</span><span class="token comment" spellcheck="true"># 若想创建一个文件夹，但不加入版本控制，即忽略这个文件夹</span>$ <span class="token function">mkdir</span> spool$ svn propset svn:ignore <span class="token string">'spool'</span> <span class="token keyword">.</span>$ svn ci -m <span class="token string">'Ignoring a directory called "spool".'</span><span class="token comment" spellcheck="true"># 切换当前项目到指定分支。服务器上更新新版本我们经常就用这个命令来把当前代码切换到新的分支</span>svn switch svn://svnbucket.com/test/branches/online1.0<span class="token comment" spellcheck="true"># 重定向仓库地址到新地址</span>svn switch --relocate 原svn地址 新svn地址<span class="token comment" spellcheck="true"># 创建分支，从主干创建一个分支保存到branches/online1.0</span>svn <span class="token function">cp</span> -m <span class="token string">"描述内容"</span> http://svnbucket.com/repos/trunk http://svnbucket.com/repos/branches/online1.0<span class="token comment" spellcheck="true"># 合并主干上的最新代码到分支上</span><span class="token function">cd</span> branches/online1.0svn merge http://svnbucket.com/repos/trunk<span class="token comment" spellcheck="true"># 分支合并到主干</span>svn merge --reintegrate http://svnbucket.com/repos/branches/online1.0<span class="token comment" spellcheck="true"># 删除分支</span>svn <span class="token function">rm</span> http://svnbucket.com/repos/branches/online1.0<span class="token comment" spellcheck="true"># 查看SVN帮助</span>svn <span class="token function">help</span><span class="token comment" spellcheck="true"># 查看指定命令的帮助信息</span>svn <span class="token function">help</span> commit</code></pre>]]></content>
      
      
      <categories>
          
          <category> 版本管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 删除远程 tag、分支</title>
      <link href="/2020/03/26/git-shan-chu-yuan-cheng-tag-fen-zhi/"/>
      <url>/2020/03/26/git-shan-chu-yuan-cheng-tag-fen-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="删除远程-Tag"><a href="#删除远程-Tag" class="headerlink" title="删除远程 Tag"></a>删除远程 Tag</h2><p>显示本地 tag</p><pre><code>git tagRemote_Systems_Operation</code></pre><p>删除本地 tag</p><pre><code>git tag -d Remote_Systems_Operation</code></pre><p>用 push, 删除远程 tag</p><pre><code>git push origin :refs/tags/Remote_Systems_Operation</code></pre><h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><pre><code>git branch -r -d origin/branch-namegit push origin :branch-name</code></pre><p><a href="https://blog.csdn.net/u011974987"><img src="https://profile.csdnimg.cn/8/4/3/3_u011974987#align=left&amp;display=inline&amp;height=75&amp;margin=%5Bobject%20Object%5D&amp;originHeight=75&amp;originWidth=75&amp;status=done&amp;style=none&amp;width=75"><br><img src="https://g.csdnimg.cn/static/user-reg-year/2x/7.png#align=left&amp;display=inline&amp;height=44&amp;margin=%5Bobject%20Object%5D&amp;originHeight=44&amp;originWidth=44&amp;status=done&amp;style=none&amp;width=44"></a></p><p>发布了 81 篇原创文章 · 获赞 322 · 访问量 57 万 +</p>]]></content>
      
      
      <categories>
          
          <category> 版本管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 镜像加速配置</title>
      <link href="/2020/03/21/docker-jing-xiang-jia-su-pei-zhi/"/>
      <url>/2020/03/21/docker-jing-xiang-jia-su-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>国内从 Docker Hub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。国内很多云服务商都提供了国内加速器服务，例如：</p><ul><li><a href="https://github.com/Azure/container-service-for-azure-china/blob/master/aks/README.md#22-container-registry-proxy">Azure 中国镜像 <code>https://dockerhub.azk8s.cn</code></a></li><li><a href="https://cr.console.aliyun.com/cn-hangzhou/mirrors">阿里云加速器(需登录账号获取)</a></li><li><a href="https://www.163yun.com/help/documents/56918246390157312">网易云加速器 <code>https://hub-mirror.c.163.com</code></a></li></ul><blockquote><p>由于镜像服务可能出现宕机，建议同时配置多个镜像。各个镜像站测试结果请到 <a href="https://github.com/docker-practice/docker-registry-cn-mirror-test/actions">docker-practice/docker-registry-cn-mirror-test</a> 查看。<br>国内各大云服务商均提供了 Docker 镜像加速服务，建议根据运行 Docker 的云平台选择对应的镜像加速服务，具体请参考官方文档。</p></blockquote><p>本节我们以 Azure 中国镜像 <code>https://dockerhub.azk8s.cn</code> 为例进行介绍。</p><h2 id="Ubuntu-16-04-、Debian-8-、CentOS-7"><a href="#Ubuntu-16-04-、Debian-8-、CentOS-7" class="headerlink" title="Ubuntu 16.04+、Debian 8+、CentOS 7"></a>Ubuntu 16.04+、Debian 8+、CentOS 7</h2><p>对于使用 <a href="https://www.freedesktop.org/wiki/Software/systemd/">systemd</a> 的系统，请在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）</p><pre class=" language-html"><code class="language-html">{ "registry-mirrors": [ "https://dockerhub.azk8s.cn","https://hub-mirror.c.163.com", "https://reg-mirror.qiniu.com","https://registry.docker-cn.com" ] }</code></pre><blockquote><p>注意，一定要保证该文件符合 json 规范，否则 Docker 将不能启动。</p></blockquote><p>之后重新启动服务。</p><pre><code>$ sudo systemctl daemon-reload$ sudo systemctl restart docker</code></pre><blockquote><p>注意：如果您之前查看旧教程，修改了 <code>docker.service</code> 文件内容，请去掉您添加的内容（<code>--registry-mirror=https://dockerhub.azk8s.cn</code>）。</p></blockquote><h2 id="Windows-10"><a href="#Windows-10" class="headerlink" title="Windows 10"></a>Windows 10</h2><p>对于使用 <code>Windows 10</code> 的用户，在任务栏托盘 Docker 图标内右键菜单选择 <code>Settings</code>，打开配置窗口后在左侧导航菜单选择 <code>Docker Engine</code>，在右侧像下边一样编辑 json 文件，之后点击 <code>Apply &amp; Restart</code> 保存后 Docker 就会重启并应用配置的镜像地址了。</p><pre><code>{  "registry-mirrors": [    "https://dockerhub.azk8s.cn",    "https://hub-mirror.c.163.com"  ]}</code></pre><h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><p>对于使用 macOS 的用户，在任务栏点击 Docker Desktop 应用图标 -&gt; <code>Perferences</code>，在左侧导航菜单选择 <code>Docker Engine</code>，在右侧像下边一样编辑 json 文件。修改完成之后，点击 <code>Apply &amp; Restart</code> 按钮，Docker 就会重启并应用配置的镜像地址了。</p><pre><code>{  "registry-mirrors": [    "https://dockerhub.azk8s.cn",    "https://hub-mirror.c.163.com"  ]}</code></pre><h2 id="检查加速器是否生效"><a href="#检查加速器是否生效" class="headerlink" title="检查加速器是否生效"></a>检查加速器是否生效</h2><p>执行 <code>$ docker info</code>，如果从结果中看到了如下内容，说明配置成功。</p><pre class=" language-html"><code class="language-html">Registry Mirrors: https://dockerhub.azk8s.cn/</code></pre><h2 id="gcr-io-镜像"><a href="#gcr-io-镜像" class="headerlink" title="gcr.io 镜像"></a>gcr.io 镜像</h2><p>国内无法直接获取 <code>gcr.io/*</code> 镜像，我们可以将 <code>gcr.io/&lt;repo-name&gt;/&lt;image-name&gt;:&lt;version&gt;</code> 替换为 <code>gcr.azk8s.cn/&lt;repo-name&gt;/&lt;image-name&gt;:&lt;version&gt;</code> ,例如</p><pre class=" language-html"><code class="language-html">$ docker pull gcr.azk8s.cn/google_containers/hyperkube-amd64:v1.9.2</code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue.js 笔记</title>
      <link href="/2020/01/21/vue.js-bi-ji/"/>
      <url>/2020/01/21/vue.js-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{<span class="token punctuation">'</span>class1<span class="token punctuation">'</span>: use}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>v-bind:class 指令<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      use<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="v-on-事件处理器"><a href="#v-on-事件处理器" class="headerlink" title="v-on : 事件处理器"></a>v-on : 事件处理器</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reverseMessage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>反转字符串<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">"Runoob!"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      reverseMessage<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul><li><code>.stop</code></li><li><code>.prevent</code></li><li><code>.capture</code></li><li><code>.self</code></li><li><code>.once </code></li></ul><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete (捕获 "删除" 和 "退格" 键)</code></li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta </code></li></ul><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>runoob<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Runoob<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>picked<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>runoob<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Runoob<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>google<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Google<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>picked<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>google<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Google<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>选中值为: {{ picked }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      picked<span class="token punctuation">:</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><ul><li>.lazy</li></ul><blockquote><p>在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步</p></blockquote><ul><li><p>.number</p><blockquote><p>如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值</p></blockquote></li><li><p>.trim</p><blockquote><p>如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：</p></blockquote></li></ul><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>A<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>B<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>Not A/B/C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h2><pre class=" language-html"><code class="language-html">见上</code></pre><h2 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h2><pre class=" language-html"><code class="language-html">见上</code></pre><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      ok<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>site in sites<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ site.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      sites<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"Runoob"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"Google"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"Taobao"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value in object<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ value }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      object<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">"菜鸟教程"</span><span class="token punctuation">,</span>        url<span class="token punctuation">:</span> <span class="token string">"http://www.runoob.com"</span><span class="token punctuation">,</span>        slogan<span class="token punctuation">:</span> <span class="token string">"学的不仅是技术，更是梦想！"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(value, key) in object<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ key }} : {{ value }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(value, key, index) in object<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      {{ index }}. {{ key }} : {{ value }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>n in 10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ n }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{ message | capitalize }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>new Vue({  el: '#app',  data: {    message: 'runoob'  },  filters: {    capitalize: function (value) {      if (!value) return ''      value = value.toString()      return value.charAt(0).toUpperCase() + value.slice(1)    }  }})</code></pre><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>原始字符串: {{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>计算后反转字符串: {{ reversedMessage }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">"Runoob!"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 计算属性的 getter</span>      reversedMessage<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// `this` 指向 vm 实例</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vue 测试实例 - 菜鸟教程(runoob.com)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/vue/2.4.2/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ site }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">"Google"</span><span class="token punctuation">,</span>          url<span class="token punctuation">:</span> <span class="token string">"http://www.google.com"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>          site<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// getter</span>            <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// setter</span>            <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">var</span> names <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> names<span class="token punctuation">[</span>names<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 调用 setter， vm.name 和 vm.url 也会被对应更新</span>      vm<span class="token punctuation">.</span>site <span class="token operator">=</span> <span class="token string">"菜鸟教程 http://www.runoob.com"</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"name: "</span> <span class="token operator">+</span> vm<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"url: "</span> <span class="token operator">+</span> vm<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="监听属性"><a href="#监听属性" class="headerlink" title="监听属性"></a>监听属性</h1><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vue 测试实例 - 菜鸟教程(runoob.com)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/vue/2.4.2/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>computed_props<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      千米 : <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>kilometers<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 米 :      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>meters<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#computed_props"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          kilometers<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          meters<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        computed<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>          kilometers<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>kilometers <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>meters <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>kilometers <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          meters<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>kilometers <span class="token operator">=</span> val <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>meters <span class="token operator">=</span> val<span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// $watch 是一个实例方法</span>      vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">"kilometers"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这个回调将在 vm.kilometers 改变后调用</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span>          <span class="token string">"修改前值为: "</span> <span class="token operator">+</span> oldValue <span class="token operator">+</span> <span class="token string">"，修改后值为: "</span> <span class="token operator">+</span> newValue<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h1><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ active: isActive }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>static<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ active: isActive, <span class="token punctuation">'</span>text-danger<span class="token punctuation">'</span>: hasError }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classObject<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>runoob</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>runoob</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 注册</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"runoob"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token string">"&lt;h1>自定义组件!&lt;/h1>"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建根实例</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>runoob</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>runoob</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token string">"&lt;h1>自定义组件!&lt;/h1>"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建根实例</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// &lt;runoob> 将只在父模板可用</span>      runoob<span class="token punctuation">:</span> Child<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello!<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 注册</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"child"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 声明 props</span>    props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 同样也可以在 vm 实例中像 "this.message" 这样使用</span>    template<span class="token punctuation">:</span> <span class="token string">"&lt;span>{{ message }}&lt;/span>"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建根实例</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="动态-Prop"><a href="#动态-Prop" class="headerlink" title="动态 Prop"></a>动态 Prop</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-item</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in sites<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>todo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"todo-item"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"todo"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token string">"&lt;li>{{ todo.text }}&lt;/li>"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      sites<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">"Runoob"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">"Google"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">"Taobao"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="Prop-验证"><a href="#Prop-验证" class="headerlink" title="Prop 验证"></a>Prop 验证</h3><pre class=" language-html"><code class="language-html">Vue.component('my-component', { props: { // 基础的类型检查 (`null` 和`undefined` 会通过任何类型验证) propA: Number, // 多个可能的类型 propB: [String,Number], // 必填的字符串 propC: { type: String, required: true }, //带有默认值的数字 propD: { type: Number, default: 100 }, // 带有默认值的对象propE: { type: Object, // 对象或数组默认值必须从一个工厂函数获取 default:function () { return { message: 'hello' } } }, // 自定义验证函数 propF: {validator: function (value) { // 这个值必须匹配下列字符串中的一个 return['success', 'warning', 'danger'].indexOf(value) !== -1 } } } })</code></pre><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，就需要使用自定义事件！<br>我们可以使用 v-on 绑定自定义事件, 每个 Vue 实例都实现了事件接口(Events interface)，即：</p><ul><li>使用 <code>$on(eventName)</code> 监听事件</li><li>使用 <code>$emit(eventName)</code> 触发事件</li></ul><p>另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。<br>以下实例中子组件已经和它外部完全解耦了。它所做的只是触发一个父组件关心的内部事件。</p><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>页面载入时，input 元素自动获取焦点：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-focus</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 注册一个全局自定义指令 v-focus</span>  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">"focus"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当绑定元素插入到 DOM 中。</span>    inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 聚焦元素</span>      el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建根实例</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="钩子"><a href="#钩子" class="headerlink" title="钩子"></a>钩子</h2><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><p>指令定义函数提供了几个钩子函数（可选）：</p><ul><li><p><code>bind</code>: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</p></li><li><p><code>inserted</code>: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</p></li><li><p><code>update</code>: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。</p></li><li><p><code>componentUpdated</code>: 被绑定元素所在模板完成一次更新周期时调用。</p></li><li><p><code>unbind</code>: 只调用一次， 指令与元素解绑时调用。</p></li></ul><h3 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h3><p>钩子函数的参数有：</p><ul><li><strong>el</strong>: 指令所绑定的元素，可以用来直接操作 DOM 。</li><li><strong>binding</strong>: 一个对象，包含以下属性：<ul><li><strong>name</strong>: 指令名，不包括 <code>v-</code> 前缀。</li><li><strong>value</strong>: 指令的绑定值， 例如： <code>v-my-directive="1 + 1"</code>, value 的值是 <code>2</code>。</li><li><strong>oldValue</strong>: 指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li><li><strong>expression</strong>: 绑定值的表达式或变量名。 例如 <code>v-my-directive="1 + 1"</code> ， expression 的值是 <code>"1 + 1"</code>。</li><li><strong>arg</strong>: 传给指令的参数。例如 <code>v-my-directive:foo</code>， arg 的值是 <code>"foo"</code>。</li><li><strong>modifiers</strong>: 一个包含修饰符的对象。 例如： <code>v-my-directive.foo.bar</code>, 修饰符对象 modifiers 的值是 <code>{ foo: true, bar: true }</code>。</li></ul></li><li><strong>vnode</strong>: Vue 编译生成的虚拟节点。</li><li><strong>oldVnode</strong>: 上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-runoob:</span>hello.a.b</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">"runoob"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    bind<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> s <span class="token operator">=</span> JSON<span class="token punctuation">.</span>stringify<span class="token punctuation">;</span>      el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span>        <span class="token string">"name: "</span> <span class="token operator">+</span>        <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">+</span>        <span class="token string">"&lt;br>"</span> <span class="token operator">+</span>        <span class="token string">"value: "</span> <span class="token operator">+</span>        <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span>        <span class="token string">"&lt;br>"</span> <span class="token operator">+</span>        <span class="token string">"expression: "</span> <span class="token operator">+</span>        <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>expression<span class="token punctuation">)</span> <span class="token operator">+</span>        <span class="token string">"&lt;br>"</span> <span class="token operator">+</span>        <span class="token string">"argument: "</span> <span class="token operator">+</span>        <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>arg<span class="token punctuation">)</span> <span class="token operator">+</span>        <span class="token string">"&lt;br>"</span> <span class="token operator">+</span>        <span class="token string">"modifiers: "</span> <span class="token operator">+</span>        <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>modifiers<span class="token punctuation">)</span> <span class="token operator">+</span>        <span class="token string">"&lt;br>"</span> <span class="token operator">+</span>        <span class="token string">"vnode keys: "</span> <span class="token operator">+</span>        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">"菜鸟教程!"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vue 测试实例 - 菜鸟教程(runoob.com)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/vue/2.4.2/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/vue-router/2.7.0/vue-router.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello App!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 使用 router-link 组件来导航. --></span>        <span class="token comment" spellcheck="true">&lt;!-- 通过传入 `to` 属性指定链接. --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;router-link> 默认会被渲染成一个 `&lt;a>` 标签 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/foo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Go to Foo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/bar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Go to Bar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 路由出口 --></span>      <span class="token comment" spellcheck="true">&lt;!-- 路由匹配到的组件将渲染在这里 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token comment" spellcheck="true">// 0. 如果使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter)</span>      <span class="token comment" spellcheck="true">// 1. 定义（路由）组件。</span>      <span class="token comment" spellcheck="true">// 可以从其他文件 import 进来</span>      <span class="token keyword">const</span> Foo <span class="token operator">=</span> <span class="token punctuation">{</span> template<span class="token punctuation">:</span> <span class="token string">"&lt;div>foo&lt;/div>"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> Bar <span class="token operator">=</span> <span class="token punctuation">{</span> template<span class="token punctuation">:</span> <span class="token string">"&lt;div>bar&lt;/div>"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 2. 定义路由</span>      <span class="token comment" spellcheck="true">// 每个路由应该映射一个组件。 其中"component" 可以是</span>      <span class="token comment" spellcheck="true">// 通过 Vue.extend() 创建的组件构造器，</span>      <span class="token comment" spellcheck="true">// 或者，只是一个组件配置对象。</span>      <span class="token comment" spellcheck="true">// 我们晚点再讨论嵌套路由。</span>      <span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/foo"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Foo <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/bar"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Bar <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 3. 创建 router 实例，然后传 `routes` 配置</span>      <span class="token comment" spellcheck="true">// 你还可以传别的配置参数, 不过先这么简单着吧。</span>      <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        routes<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// （缩写）相当于 routes: routes</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 4. 创建和挂载根实例。</span>      <span class="token comment" spellcheck="true">// 记得要通过 router 配置参数注入路由，</span>      <span class="token comment" spellcheck="true">// 从而让整个应用都有路由功能</span>      <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        router<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 现在，应用已经启动了！</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="router-link-属性"><a href="#router-link-属性" class="headerlink" title="router-link 属性"></a>router-link 属性</h2><h3 id="to"><a href="#to" class="headerlink" title="to"></a>to</h3><p>表示目标路由的链接。 当被点击后，内部会立刻把 to 的值传到 router.push()，所以这个值可以是一个字符串或者是描述目标位置的对象。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 字符串 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 渲染结果 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 使用 v-bind 的 JS 表达式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>home<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>home<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 同上 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ path: <span class="token punctuation">'</span>home<span class="token punctuation">'</span> }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 命名的路由 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ name: <span class="token punctuation">'</span>user<span class="token punctuation">'</span>, params: { userId: 123 }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 带查询参数，下面的结果为 /register?plan=private --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ path: <span class="token punctuation">'</span>register<span class="token punctuation">'</span>, query: { plan: <span class="token punctuation">'</span>private<span class="token punctuation">'</span> }}<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>Register<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>设置 replace 属性的话，当点击时，会调用 router.replace() 而不是 router.push()，导航后不会留下 history 记录。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ path: <span class="token punctuation">'</span>/abc<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span> <span class="token attr-name">replace</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre><p>append</p><p>设置 append 属性后，则在当前 (相对) 路径前添加基路径。例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ path: <span class="token punctuation">'</span>relative/path<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span> <span class="token attr-name">append</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre><p>tag</p><p>有时候想要 &nbsp; <code>&lt;router-link&gt;</code> 渲染成某种标签，例如 <code>&lt;li&gt;</code>。 于是我们使用 <code>tag</code> prop 类指定何种标签，同样它还是会监听点击，触发导航。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/foo<span class="token punctuation">"</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>li<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>foo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 渲染结果 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>foo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><h3 id="active-class"><a href="#active-class" class="headerlink" title="active-class"></a>active-class</h3><p>设置 链接激活时使用的 CSS 类名。可以通过以下代码来替代。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">._active</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ path: <span class="token punctuation">'</span>/route1<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span> <span class="token attr-name">active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_active<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>Router Link 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span>  <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ path: <span class="token punctuation">'</span>/route2<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>span<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>Router Link 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>注意这里 <strong>class</strong> 使用 **active_class=”_active”**。</p><h3 id="exact-active-class"><a href="#exact-active-class" class="headerlink" title="exact-active-class"></a>exact-active-class</h3><p>配置当链接被精确匹配的时候应该激活的 class。可以通过以下代码来替代。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ path: <span class="token punctuation">'</span>/route1<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span> <span class="token attr-name">exact-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_active<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>Router Link 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span>  <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ path: <span class="token punctuation">'</span>/route2<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>span<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>Router Link 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h3 id="event"><a href="#event" class="headerlink" title="event"></a>event</h3><p>声明可以用来触发导航的事件。可以是一个字符串或是一个包含字符串的数组。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ path: <span class="token punctuation">'</span>/route1<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span> <span class="token attr-name">event</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mouseover<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>Router Link 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre><p>以上代码设置了 event 为 mouseover ，及在鼠标移动到 Router Link 1 上时导航的 HTML 内容会发生改变。</p><h1 id="过渡-amp-动画"><a href="#过渡-amp-动画" class="headerlink" title="过渡 &amp; 动画"></a>过渡 &amp; 动画</h1><p><a href="https://www.runoob.com/vue2/vue-transitions.html">https://www.runoob.com/vue2/vue-transitions.html</a></p><h1 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h1><p><a href="https://www.runoob.com/vue2/vue-mixins.html">https://www.runoob.com/vue2/vue-mixins.html</a></p><h1 id="Ajax-axios"><a href="#Ajax-axios" class="headerlink" title="Ajax(axios)"></a>Ajax(axios)</h1><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><p><strong>使用 cdn:</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/axios/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>或</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/axios/0.18.0/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>使用 npm:</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> axios</code></pre><p><strong>使用 bower:</strong></p><pre class=" language-bash"><code class="language-bash">bower <span class="token function">install</span> axios</code></pre><p><strong>使用 yarn:</strong></p><pre class=" language-bash"><code class="language-bash">yarn add axios</code></pre><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="GET-方法"><a href="#GET-方法" class="headerlink" title="GET 方法"></a>GET 方法</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      info<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    axios      <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"https://www.runoob.com/try/ajax/json_demo.json"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 请求失败处理</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>h1<span class="token operator">></span>网站列表<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token operator">&lt;</span>div    v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"site in info"</span>  <span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> site<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type <span class="token operator">=</span> <span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      info<span class="token punctuation">:</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    axios      <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'https://www.runoob.com/try/ajax/json_demo.json'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sites<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 请求失败处理</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 直接在 URL 上添加参数 ID=12345</span>axios  <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/user?ID=12345"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 也可以通过 params 设置参数：</span>axios  <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    params<span class="token punctuation">:</span> <span class="token punctuation">{</span>      ID<span class="token punctuation">:</span> <span class="token number">12345</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      info<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    axios      <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"https://www.runoob.com/try/ajax/demo_axios_post.php"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 请求失败处理</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript">axios  <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span> <span class="token string">"Fred"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 参数 firstName</span>    lastName<span class="token punctuation">:</span> <span class="token string">"Flintstone"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 参数 lastName</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="执行多个并发请求"><a href="#执行多个并发请求" class="headerlink" title="执行多个并发请求"></a>执行多个并发请求</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/user/12345"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/user/12345/permissions"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>acct<span class="token punctuation">,</span> perms<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 两个请求现在都执行完成</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="axios-API"><a href="#axios-API" class="headerlink" title="axios API"></a>axios API</h2><p>可以通过向 axios 传递相关配置来创建请求。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 发送 POST 请求</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>  url<span class="token punctuation">:</span> <span class="token string">'/user/12345'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span> <span class="token string">'Fred'</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">'Flintstone'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  GET 请求远程图片</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  method<span class="token punctuation">:</span><span class="token string">'get'</span><span class="token punctuation">,</span>  url<span class="token punctuation">:</span><span class="token string">'http://bit.ly/2mTM3nY'</span><span class="token punctuation">,</span>  responseType<span class="token punctuation">:</span><span class="token string">'stream'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  response<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'ada_lovelace.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">axios</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 发送 GET 请求（默认的方法）</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="请求配置项"><a href="#请求配置项" class="headerlink" title="请求配置项"></a>请求配置项</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// `url` 是用于请求的服务器 URL</span>  url<span class="token punctuation">:</span> <span class="token string">"/user"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `method` 是创建请求时使用的方法</span>  method<span class="token punctuation">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认是 get</span>  <span class="token comment" spellcheck="true">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span>  <span class="token comment" spellcheck="true">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span>  baseURL<span class="token punctuation">:</span> <span class="token string">"https://some-domain.com/api/"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `transformRequest` 允许在向服务器发送前，修改请求数据</span>  <span class="token comment" spellcheck="true">// 只能用在 "PUT", "POST" 和 "PATCH" 这几个请求方法</span>  <span class="token comment" spellcheck="true">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span>  transformRequest<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对 data 进行任意转换处理</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span>  transformResponse<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对 data 进行任意转换处理</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `headers` 是即将被发送的自定义请求头</span>  headers<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"X-Requested-With"</span><span class="token punctuation">:</span> <span class="token string">"XMLHttpRequest"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `params` 是即将与请求一起发送的 URL 参数</span>  <span class="token comment" spellcheck="true">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span>  params<span class="token punctuation">:</span> <span class="token punctuation">{</span>    ID<span class="token punctuation">:</span> <span class="token number">12345</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span>  <span class="token comment" spellcheck="true">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span>  paramsSerializer<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token punctuation">{</span>arrayFormat<span class="token punctuation">:</span> <span class="token string">"brackets"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `data` 是作为请求主体被发送的数据</span>  <span class="token comment" spellcheck="true">// 只适用于这些请求方法 "PUT", "POST", 和 "PATCH"</span>  <span class="token comment" spellcheck="true">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span>  <span class="token comment" spellcheck="true">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span>  <span class="token comment" spellcheck="true">// - 浏览器专属：FormData, File, Blob</span>  <span class="token comment" spellcheck="true">// - Node 专属： Stream</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span> <span class="token string">"Fred"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span>  <span class="token comment" spellcheck="true">// 如果请求花费了超过 `timeout` 的时间，请求将被中断</span>  timeout<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `withCredentials` 表示跨域请求时是否需要使用凭证</span>  withCredentials<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认的</span>  <span class="token comment" spellcheck="true">// `adapter` 允许自定义处理请求，以使测试更轻松</span>  <span class="token comment" spellcheck="true">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span>  adapter<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ... */</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span>  <span class="token comment" spellcheck="true">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span>  auth<span class="token punctuation">:</span> <span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token string">"janedoe"</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token string">"s00pers3cret"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `responseType` 表示服务器响应的数据类型，可以是 "arraybuffer", "blob", "document", "json", "text", "stream"</span>  responseType<span class="token punctuation">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认的</span>  <span class="token comment" spellcheck="true">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span>  xsrfCookieName<span class="token punctuation">:</span> <span class="token string">"XSRF-TOKEN"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default</span>  <span class="token comment" spellcheck="true">// `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称</span>  xsrfHeaderName<span class="token punctuation">:</span> <span class="token string">"X-XSRF-TOKEN"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认的</span>  <span class="token comment" spellcheck="true">// `onUploadProgress` 允许为上传处理进度事件</span>  onUploadProgress<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>progressEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对原生进度事件的处理</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `onDownloadProgress` 允许为下载处理进度事件</span>  onDownloadProgress<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>progressEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对原生进度事件的处理</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `maxContentLength` 定义允许的响应内容的最大尺寸</span>  maxContentLength<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span>  validateStatus<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 默认的</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span>  <span class="token comment" spellcheck="true">// 如果设置为0，将不会 follow 任何重定向</span>  maxRedirects<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认的</span>  <span class="token comment" spellcheck="true">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span>  <span class="token comment" spellcheck="true">// `keepAlive` 默认没有启用</span>  httpAgent<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">http<span class="token punctuation">.</span>Agent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> keepAlive<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  httpsAgent<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">https<span class="token punctuation">.</span>Agent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> keepAlive<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// "proxy" 定义代理服务器的主机名称和端口</span>  <span class="token comment" spellcheck="true">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span>  <span class="token comment" spellcheck="true">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span>  proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">9000</span><span class="token punctuation">,</span>    auth<span class="token punctuation">:</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>      username<span class="token punctuation">:</span> <span class="token string">"mikeymike"</span><span class="token punctuation">,</span>      password<span class="token punctuation">:</span> <span class="token string">"rapunz3l"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `cancelToken` 指定用于取消请求的 cancel token</span>  <span class="token comment" spellcheck="true">// （查看后面的 Cancellation 这节了解更多）</span>  cancelToken<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>cancel<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="响应结构"><a href="#响应结构" class="headerlink" title="响应结构"></a>响应结构</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// `data` 由服务器提供的响应</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `status`  HTTP 状态码</span>  status<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `statusText` 来自服务器响应的 HTTP 状态信息</span>  statusText<span class="token punctuation">:</span> <span class="token string">"OK"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `headers` 服务器响应的头</span>  headers<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// `config` 是为请求提供的配置信息</span>  config<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="配置的默认值"><a href="#配置的默认值" class="headerlink" title="配置的默认值"></a>配置的默认值</h3><p>你可以指定将被用在各个请求的配置默认值。<br>全局的 axios 默认值：</p><pre class=" language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">"https://api.example.com"</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">[</span><span class="token string">"Authorization"</span><span class="token punctuation">]</span> <span class="token operator">=</span> AUTH_TOKEN<span class="token punctuation">;</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post<span class="token punctuation">[</span><span class="token string">"Content-Type"</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">;</span></code></pre><p>自定义实例默认值：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 创建实例时设置配置的默认值</span><span class="token keyword">var</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseURL<span class="token punctuation">:</span> <span class="token string">"https://api.example.com"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在实例已创建后修改默认值</span>instance<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">[</span><span class="token string">"Authorization"</span><span class="token punctuation">]</span> <span class="token operator">=</span> AUTH_TOKEN<span class="token punctuation">;</span></code></pre><h2 id="配置的优先顺序"><a href="#配置的优先顺序" class="headerlink" title="配置的优先顺序"></a>配置的优先顺序</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 使用由库提供的配置的默认值来创建实例</span><span class="token comment" spellcheck="true">// 此时超时配置的默认值是 `0`</span><span class="token keyword">var</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 覆写库的超时默认值</span><span class="token comment" spellcheck="true">// 现在，在超时前，所有请求都会等待 2.5 秒</span>instance<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 为已知需要花费很长时间的请求覆写超时设置</span>instance<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/longRequest"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  timeout<span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>在请求或响应被 then 或 catch 处理前拦截它们。</p><h1 id="Ajax-vue-resource"><a href="#Ajax-vue-resource" class="headerlink" title="Ajax(vue-resource)"></a>Ajax(vue-resource)</h1><h3 id="Get-请求"><a href="#Get-请求" class="headerlink" title="Get 请求"></a>Get 请求</h3><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#box"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">"Hello World!"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//发送get请求</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/try/ajax/ajax_info.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>          <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求失败处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="post-请求"><a href="#post-请求" class="headerlink" title="post 请求"></a>post 请求</h3><p>post 发送数据到后端，需要第三个参数**&nbsp;{emulateJSON:true}**。<br>emulateJSON 的作用： 如果 Web 服务器无法处理编码为 application/json 的请求，你可以启用 emulateJSON 选项。</p><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#box"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">"Hello World!"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      post<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//发送 post 请求</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$http          <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>            <span class="token string">"/try/ajax/demo_test_post.php"</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"菜鸟教程"</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span> <span class="token string">"http://www.runoob.com"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> emulateJSON<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>          <span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>            <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>              document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除 systemd journal 日志</title>
      <link href="/2020/01/06/shan-chu-systemd-journal-ri-zhi/"/>
      <url>/2020/01/06/shan-chu-systemd-journal-ri-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="查看现有的-journal-日志"><a href="#查看现有的-journal-日志" class="headerlink" title="查看现有的 journal 日志"></a>查看现有的 journal 日志</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看日志的大小</span>$ <span class="token function">du</span> -hs /var/log/journal/4.1G    /var/log/journal/<span class="token comment" spellcheck="true"># 4.1GB worth of journal files, with the oldest dating back over 2 months.</span><span class="token comment" spellcheck="true"># 查看最大的日志文件</span>$ <span class="token function">ls</span> -lath /var/log/journal/*/ <span class="token operator">|</span> <span class="token function">tail</span> -n 2-rw-r-x---+ 1 root systemd-journal 8.0M Dec 24 05:15 user-xxx.journal</code></pre><h2 id="删除-10-天之前的-systemd-journals-日志"><a href="#删除-10-天之前的-systemd-journals-日志" class="headerlink" title="删除 10 天之前的 systemd journals 日志"></a>删除 10 天之前的 systemd journals 日志</h2><pre class=" language-bash"><code class="language-bash">$ journalctl --vacuum-time<span class="token operator">=</span>10d<span class="token punctuation">..</span>.Vacuuming done, freed 2.3G of archived journals on disk.</code></pre><h2 id="根据文件大小删除-systemd-journals"><a href="#根据文件大小删除-systemd-journals" class="headerlink" title="根据文件大小删除 systemd journals"></a>根据文件大小删除 systemd journals</h2><pre class=" language-bash"><code class="language-bash">$ journalctl --vacuum-size<span class="token operator">=</span>2G<span class="token punctuation">..</span>.Vacuuming done, freed 720.0M of archived journals on disk.</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> systemd </tag>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
