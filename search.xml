<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker搭建SVN</title>
      <link href="2020/11/23/docker-da-jian-svn/"/>
      <url>2020/11/23/docker-da-jian-svn/</url>
      
        <content type="html"><![CDATA[<p>tags: [svn, docker]<br>categories: [版本管理]</p><h2 id="一、简述"><a href="#一、简述" class="headerlink" title="一、简述"></a>一、简述</h2><h3 id="1-基础环境"><a href="#1-基础环境" class="headerlink" title="1. 基础环境"></a>1. 基础环境</h3><ul><li>Docker</li><li>docker-compose</li></ul><h3 id="2-开启简单的容器实例"><a href="#2-开启简单的容器实例" class="headerlink" title="2. 开启简单的容器实例"></a>2. 开启简单的容器实例</h3><p>创建 docker-compose.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># filename: docker-compose.yml</span><span class="token key atrule">svn</span><span class="token punctuation">:</span>  <span class="token key atrule">image</span><span class="token punctuation">:</span> elleflorio/svn<span class="token punctuation">-</span>server  <span class="token key atrule">container_name</span><span class="token punctuation">:</span> svn<span class="token punctuation">-</span>server  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"80:80"</span>    <span class="token punctuation">-</span> <span class="token string">"3690:3690"</span>  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ./svn/svn_repo/<span class="token punctuation">:</span>/home/svn/ <span class="token comment" spellcheck="true"># 挂载存放版本文件夹</span>    <span class="token punctuation">-</span> ./svn/svn_config/<span class="token punctuation">:</span>/etc/subversion/ <span class="token comment" spellcheck="true"># 挂载存放svn配置文件夹</span>    <span class="token punctuation">-</span> /etc/localtime<span class="token punctuation">:</span>/etc/localtime<span class="token punctuation">:</span>ro <span class="token comment" spellcheck="true"># 主机的时间同步到容器</span>  <span class="token key atrule">restart</span><span class="token punctuation">:</span> always</code></pre><p>启动使用下面的命令容器</p><pre class=" language-bash"><code class="language-bash">docker-compose up -d</code></pre><h3 id="3-在服务器创建代码仓库"><a href="#3-在服务器创建代码仓库" class="headerlink" title="3. 在服务器创建代码仓库"></a>3. 在服务器创建代码仓库</h3><pre><code># 创建代码仓库docker exec -t svn-server svnadmin create /home/svn/test</code></pre><p>以上代码中，在容器中的 / home/svn/test 目录创建代码仓库，会同步到本机的 / var/svn 目录。我们先进行 svn 仓库配置。</p><blockquote><p>SVN 库中的配置目录 conf 有三个文件:</p><ul><li>authz 是权限控制文件</li><li>passwd 是帐号密码文件</li><li>svnserve.conf 是 SVN 服务综合配置文件</li></ul></blockquote><p><strong>配置权限配置文件 authz</strong><br>编辑 authz ，内容参考如下：<br><em>示例代码：/var/svn/test/conf/authz</em></p><pre><code>[groups]#用户组admin = master,master#用户组所对应的目录[/]#库目录权限@admin = rw#用户组权限*=r</code></pre><p><strong>配置账号密码文件 passwd</strong><br>编辑 passwd ，内容参考如下：<br><em>示例代码：/var/svn/test/conf/passwd</em></p><pre><code>[users]# harry = harryssecret# sally = sallyssecretmaster = masteradmin = admin</code></pre><p><strong>配置 SVN 服务综合配置文件 svnserve.conf</strong><br>编辑 svnserve.conf ，内容参考如下：<br><em>示例代码：/var/svn/test/conf/svnserve.conf</em></p><pre><code>[general]# force-username-case = none# 匿名访问的权限 可以是read、write，none，默认为readanon-access = none#使授权用户有写权限auth-access = write#密码数据库的路径password-db = passwd#访问控制文件authz-db = authz#认证命名空间，SVN会在认证提示里显示，并且作为凭证缓存的关键字realm = /var/svn/test[sasl]</code></pre><p>完成以上配置之后，我们要做的是服务器代码与本地代码同步，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20191127221033440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzMwMjg2,size_16,color_FFFFFF,t_70#align=left&amp;display=inline&amp;height=523&amp;margin=%5Bobject%20Object%5D&amp;originHeight=523&amp;originWidth=1056&amp;status=done&amp;style=none&amp;width=1056"></p><p>下面，我们将本机电脑代码推送到 SVN 仓库后，服务器又将代码同步到项目目录。</p><h3 id="4-同步代码到服务器项目目录"><a href="#4-同步代码到服务器项目目录" class="headerlink" title="4. 同步代码到服务器项目目录"></a>4. 同步代码到服务器项目目录</h3><p><strong>(1) 在 PC 上将代码上传到 svn 仓库（PC 上必须安装 SVN）</strong></p><pre><code># 将仓库中的代码pull到本地,下面的123.123.123.123代表的是服务器IP地址，以下过程可能会需要输入svn账号和密码svn checkout svn://123.123.123.123/test# 进入代码目录cd test# 创建示例文件echo "hello" &gt;&gt; test.txt# 提交代码到SVN仓库svn add test.txtsvn commit test.txt -m 'test'</code></pre><p><strong>(2) 服务器同步代码</strong></p><pre><code># 将代码同步到项目目录docker exec -t svn-server svn checkout svn://127.0.0.1/test /var/www/html/test --username master --password master --force --no-auth-cache</code></pre><p><strong>(3) 自动同步代码</strong></p><p>实际上，如果我们用于开发的 PC 每一次向服务器提交一次代码，服务器都需要手动执行一下同步命令，本地代码才会同步到服务器的项目目录。想必很麻烦，于是我们可以使用 SVN 提供的钩子去实现代码自动更新。</p><pre><code># 进入钩子配置文件目录cd /var/svn/test/hooks# 复制钩子文件cp post-commit.tmpl post-commit</code></pre><p>我们将 post-commit.tmpl 钩子文件的后缀名去掉即可生效，于是我们复制一份。接下来我们编辑 post-commit 文件，注释掉发送邮件的代码。然后在下面加上两行代码即可，如下：</p><pre><code>REPOS="$1"REV="$2"TXN_NAME="$3"#mailer.py commit "$REPOS" "$REV" /path/to/mailer.conf# 设置编码export LANG="en_US.UTF-8"# 更新代码到项目目录svn update --username master --password master /var/www/html/test</code></pre><p>编辑完成配置文件之后，我们只需要保存即可，自动生效。此时在 PC 上修改项目内容，再次提交到代码仓库，服务器会自动同步到服务器的项目目录。不再需要手动执行 svn checkout 指令</p><hr><blockquote><p>参考文档：<br><a href="https://blog.csdn.net/qq_34330286/article/details/103284582">https://blog.csdn.net/qq_34330286/article/details/103284582</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SVN常用命令</title>
      <link href="2020/11/23/svn-chang-yong-ming-ling/"/>
      <url>2020/11/23/svn-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>tags: [svn]<br>categories: [版本管理]</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># checkout代码</span>svn co svn://svnbucket.com/xxx/xxx<span class="token comment" spellcheck="true"># 更新代码</span>svn up<span class="token comment" spellcheck="true"># 添加新文件到版本库</span>svn add filename<span class="token comment" spellcheck="true"># 添加当前目录下所有php文件</span>svn add *.php<span class="token comment" spellcheck="true"># 递归添加当前目录下的所有新文件</span>svn add <span class="token keyword">.</span> --no-ignore --force<span class="token comment" spellcheck="true"># 提交代码</span>svn commit -m <span class="token string">"提交描述"</span><span class="token comment" spellcheck="true"># 查看指定文件的所有log</span>svn log test.php<span class="token comment" spellcheck="true"># 查看指定版本号的log</span>svn log -r 100<span class="token comment" spellcheck="true"># 撤销本地文件的修改（还没提交的）</span>svn revert test.phpsvn revert -r 目录名<span class="token comment" spellcheck="true"># 撤销目录下所有本地修改</span>svn revert --recursive 目录名<span class="token comment" spellcheck="true"># 查看当前工作区的所有改动</span>svn <span class="token function">diff</span><span class="token comment" spellcheck="true"># 查看当前工作区test.php文件与最新版本的差异</span>svn <span class="token function">diff</span> test.php<span class="token comment" spellcheck="true"># 指定版本号比较差异</span>svn <span class="token function">diff</span> -r 200:201 test.php<span class="token comment" spellcheck="true"># 查看当前工作区和版本301中bin目录的差异</span>svn <span class="token function">diff</span> -r 301 bin<span class="token comment" spellcheck="true"># 查看当前工作区的状态</span>svn status<span class="token comment" spellcheck="true"># 查看svn信息</span>svn info<span class="token comment" spellcheck="true"># 查看文件列表，可以指定-r查看，查看指定版本号的文件列表</span>svn <span class="token function">ls</span>svn <span class="token function">ls</span> -r 100<span class="token comment" spellcheck="true"># 显示文件的每一行最后是谁修改的（出了BUG，经常用来查这段代码是谁改的）</span>svn blame filename.php<span class="token comment" spellcheck="true"># 查看指定版本的文件内容，不加版本号就是查看最新版本的</span>svn <span class="token function">cat</span> test.py -r 2<span class="token comment" spellcheck="true"># 清理</span>svn cleanup<span class="token comment" spellcheck="true"># 若想创建了一个文件夹，并且把它加入版本控制，但忽略文件夹中的所有文件的内容</span>$ svn <span class="token function">mkdir</span> spool$ svn propset svn:ignore <span class="token string">'*'</span> spool$ svn ci -m <span class="token string">'Adding "spool" and ignoring its contents.'</span><span class="token comment" spellcheck="true"># 若想创建一个文件夹，但不加入版本控制，即忽略这个文件夹</span>$ <span class="token function">mkdir</span> spool$ svn propset svn:ignore <span class="token string">'spool'</span> <span class="token keyword">.</span>$ svn ci -m <span class="token string">'Ignoring a directory called "spool".'</span><span class="token comment" spellcheck="true"># 切换当前项目到指定分支。服务器上更新新版本我们经常就用这个命令来把当前代码切换到新的分支</span>svn switch svn://svnbucket.com/test/branches/online1.0<span class="token comment" spellcheck="true"># 重定向仓库地址到新地址</span>svn switch --relocate 原svn地址 新svn地址<span class="token comment" spellcheck="true"># 创建分支，从主干创建一个分支保存到branches/online1.0</span>svn <span class="token function">cp</span> -m <span class="token string">"描述内容"</span> http://svnbucket.com/repos/trunk http://svnbucket.com/repos/branches/online1.0<span class="token comment" spellcheck="true"># 合并主干上的最新代码到分支上</span><span class="token function">cd</span> branches/online1.0svn merge http://svnbucket.com/repos/trunk<span class="token comment" spellcheck="true"># 分支合并到主干</span>svn merge --reintegrate http://svnbucket.com/repos/branches/online1.0<span class="token comment" spellcheck="true"># 删除分支</span>svn <span class="token function">rm</span> http://svnbucket.com/repos/branches/online1.0<span class="token comment" spellcheck="true"># 查看SVN帮助</span>svn <span class="token function">help</span><span class="token comment" spellcheck="true"># 查看指定命令的帮助信息</span>svn <span class="token function">help</span> commit</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
